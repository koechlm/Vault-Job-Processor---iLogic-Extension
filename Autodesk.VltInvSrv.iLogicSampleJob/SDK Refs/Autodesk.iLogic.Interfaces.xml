<?xml version="1.0"?>
<doc>
<assembly>
<name>
Autodesk.iLogic.Interfaces
</name>
</assembly>
<members>
<member name="T:Autodesk.iLogic.Interfaces.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.DoubleForEquals">
 <summary>
 Encapsulated Double value type, with an equals operator that does not insist on strict equality. 
 This provides iLogic rule authors with the ability to easily compare two double values, without having to explicitly round the
 values or compare within a tolerance.
 The values are stored in double precision (approximately 15 decimal digits), but comparisons are made in single precision (approximately 6 decimal digits).
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.DoubleUtil">
 <summary>
 Provides functions to compare double-precision numbers (with approximately 15 decimal digits) as if they were single-precision
 (approximately 6 decimal digits).
 </summary>
 <remarks>
 This is used by the <see cref="T:Autodesk.iLogic.Interfaces.DoubleForEquals"/> type.
 </remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.DoubleUtil.DoublesAreEqual(System.Double,System.Double)">
 <summary>
 Tests to see if two numbers are equal within approximately 6 decimal digits.
 </summary>
 <param name="ra">First number.</param>
 <param name="rb">Second number.</param>
 <returns>True if the numbers are equal or nearly equal.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.DoubleUtil.DoublesAreDifferent(System.Double,System.Double)">
 <summary>
 Tests to see if two numbers are not equal within approximately 6 decimal digits.
 </summary>
 <param name="ra">First number.</param>
 <param name="rb">Second number.</param>
 <returns>False if the numbers are equal (or nearly equal).</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IiLogicAutomation">
 <summary>
 iLogic Automation interface.  This can be called from COM or .NET, from a rule or an addin or from out-of-process.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.InternalVersionMajor">
 <summary>
 Gets the major version number of the iLogic addin.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.InternalVersionMinor">
 <summary>
 Gets the minor version number of the iLogic addin.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.CallingFromOutside">
 <summary>
 Set this to True if you are calling from out-of-process.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.RulesEnabled">
 <summary>
 Gets or sets a value that indicates whether or not rules will run automatically on parameter changes or other events.
 Set this to False to disable rules from running in response to parameter changes or other events.
 Set this to True to re-enable rule running.  This will also clear any rule errors that may have disabled rules from running.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.RulesOnEventsEnabled">
 <summary>
 Gets or sets a value that indicates whether rules-on-events (event triggers) are enabled or not.
 Set this to False if there may be rules that run on document Open or Close (or other events), and
 you know you don't want them to run when calling from automation.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.AddRule(Inventor.Document,System.String,System.String)">
 <summary>
 Adds a rule to an Inventor document. Also compiles and runs it.
 </summary>
 <param name="doc">The document where the rule will be created.</param>
 <param name="ruleName">The rule name.</param>
 <param name="ruleText">The rule contents.</param>
 <returns></returns>
 <remarks>The rule will be compiled and run.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.DeleteRule(Inventor.Document,System.String)">
 <summary>
 Deletes a rule in an Inventor document.
 </summary>
 <param name="doc">The document.</param>
 <param name="ruleName">The name of the rule to delete.</param>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.RunRule(Inventor.Document,System.String)">
 <summary>
 Runs a rule in a document.
 </summary>
 <param name="doc">The document that contains the rule.</param>
 <param name="ruleName">The rule name.</param>
 <returns>Zero if successful.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.RunExternalRule(Inventor.Document,System.String)">
 <summary>
 Runs an external rule.
 </summary>
 <param name="doc">The document to be used as the context in which the rule is run.</param>
 <param name="ruleName">The filename. This can be a relative path.
 The file must have  a valid extension, but this argument does not need to include the extension.
 </param>
 <returns>Zero if successful.</returns>
 <remarks>iLogic will look for the file in the folder of the current document, in the workspace folder, and in the external rule directories.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.RunRuleDirect(Autodesk.iLogic.Interfaces.iLogicRule)">
 <summary>
 Runs a rule, by specifying the rule object.
 </summary>
 <param name="rule">The rule object.</param>
 <returns></returns>
 <remarks>The rule object can be obtained from GetRule or the Rules property.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.RunRuleWithArguments(Inventor.Document,System.String,Inventor.NameValueMap)">
 <summary>
 Runs a rule, also passing arguments to the rule.
 </summary>
 <param name="doc">The document that contains the rule.</param>
 <param name="ruleName">The rule name.</param>
 <param name="ruleArguments">Arguments to pass to the rule.</param>
 <returns>Zero if successful.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.RunExternalRuleWithArguments(Inventor.Document,System.String,Inventor.NameValueMap)">
 <summary>
 Runs an external rule, also passing arguments to the rule.
 </summary>
 <param name="doc">The document to be used as the context in which the rule is run.</param>
 <param name="ruleName">The filename. This can be a relative path.
 The file must have  a valid extension, but this argument does not need to include the extension.
 </param>
 <param name="ruleArguments">Arguments to pass to the rule</param>
 <returns>Zero if successful.</returns>
 <remarks>iLogic will look for the file in the folder of the current document.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.RunRuleDirectWithArguments(Autodesk.iLogic.Interfaces.iLogicRule,Inventor.NameValueMap)">
 <summary>
 Runs a rule, by specifying the rule object, also passing arguments to the rule.
 </summary>
 <param name="rule">The rule object.</param>
 <param name="ruleArguments">Arguments to pass to the rule</param>
 <returns></returns>
 <remarks>The rule object can be obtained from GetRule or the Rules property.</remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.ParamValue(Inventor.Document,System.String)">
 <summary>
 Gets and sets the value of an Inventor parameter.
 </summary>
 <param name="doc">The document that contains the parameter.</param>
 <param name="paramName">The parameter name.</param>
 <returns>For a numeric parameter, returns a Double.
 For a Text parameter, returns a String,
 For a True/False parameter, returns a Boolean.
 </returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.ParamValueInComponent(Inventor.Document,System.String,System.String)">
 <summary>
 Gets and sets the value of an Inventor parameter in a component or referenced document.
 </summary>
 <param name="doc">The document (usually an assembly) that contains the component or referenced document.</param>
 <param name="componentOrDocName">This can be a component or document name.</param>
 <param name="paramName"></param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.ParamValueDirect(Autodesk.iLogic.Interfaces.iLogicParameter)">
 <summary>
 Gets and sets the value of a Text or True/False parameter.
 </summary>
 <param name="param"></param>
 <value></value>
 <returns></returns>
 <remarks>This function is deprecated. Use the Inventor API Parameter.Value instead.</remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.Rules(Inventor.Document)">
 <summary>
 Gets a list of the rules in a document.
 </summary>
 <param name="doc">The document that contains the rules.</param>
 <returns>An IEnumerable of objects that implement the iLogicRule interface.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.GetRule(Inventor.Document,System.String)">
 <summary>
 Gets a rule in a document.
 </summary>
 <param name="doc">The document that contains the rule.</param>
 <param name="ruleName">Name of the rule to get.</param>
 <returns>A rule object.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.Params(Inventor.Document)">
 <summary>
 Gets a list of the Text and True/False parameters in the document.
 </summary>
 <param name="doc"></param>
 <value></value>
 <returns>An IEnumerable of objects that implement the iLogicParameter interface.</returns>
 <remarks>This function is deprecated. Use the Inventor API interface named Parameters instead.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.GetParam(Inventor.Document,System.String)">
 <summary>
 Gets an iLogic parameter (implementing the iLogicParameter interface) by name.
 </summary>
 <param name="doc"></param>
 <param name="paramName"></param>
 <remarks>This function is deprecated. Use the Inventor API instead.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.MultiValueSetValueOptions(System.Boolean,System.Int32,System.String)">
 <summary>
 Controls what the behavior of iLogic will be when you assign a multivalue list to a parameter.
 </summary>
 <param name="doSetValue">Set this to True if you want to automatically change the parameter value to one that is in the list, if necessary.</param>
 <param name="DefaultIndex">Index if the list of the value to use.  This only applies to Text parameters.</param>
 <param name="NumericCompare">This option is no longer supported.</param>
 <remarks></remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.ParamMultiValues(Inventor.Document,System.String)">
 <summary>
 Gets or sets the multivalue list of an Inventor parameter, as an array of strings.
 </summary>
 <param name="doc">The document that contains the parameter.</param>
 <param name="paramName">The parameter name.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.InventorParamMultiValues(Inventor.Parameter)">
 <summary>
 Gets or sets the multivalue list of an Inventor parameter, specifying an Inventor.Parameter object directly.
 </summary>
 <param name="param">The Inventor parameter object.</param>
 <value></value>
 <returns></returns>
 <remarks>This function is deprecated. Use the Inventor API ExpressionList object instead.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.DeleteAllRules(Inventor.Document)">
 <summary>
 Deletes all rules in a document. In an assembly, this will also recursively delete all rules in all the referenced documents.
 </summary>
 <param name="doc">The document.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.DeleteAllRulesInDocument(Inventor.Document)">
 <summary>
 Deletes all rules in the specified document only.
 </summary>
 <param name="doc">The document.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.DeleteAlliLogicObjects(Inventor.Document)">
 <summary>
 Deletes all rules in a document.
 </summary>
 <param name="doc"></param>
 <remarks>This is deprecated.  It is provided for backward compatibility. Use DeleteAllRules instead.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.ParametersXmlSave(Inventor.Document,System.String,Autodesk.iLogic.Interfaces.XmlSaveOption)">
 <summary>
 Exports Inventor parameters from a document to an XML file.
 </summary>
 <param name="doc">The document.</param>
 <param name="xmlFileName">The full path of the XML file.</param>
 <param name="saveOption">Specifies whether to save only key parameters, or all parameters.</param>
 <returns></returns>
 <remarks>You can export all parameters, or key parameters only.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.ParametersXmlLoad(Inventor.Document,System.String)">
 <summary>
 Imports Inventor parameters from an XML file to a document.
 </summary>
 <param name="doc">The document.</param>
 <param name="xmlFileName">The full path of the XML file.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.EnterDelayedRuleRunningMode">
 <summary>
 Puts iLogic into a delayed rule-running mode.
 In this mode, rules that are triggered by parameter changes and other events
 will not be run until you call ExitDelayedRuleRunningMode.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.InDelayedRuleRunningMode">
 <summary>
 Indicates that iLogic is in delayed rule-running mode.
 </summary>
 <returns>True if iLogic is in delayed rule-running mode.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.ExitDelayedRuleRunningMode(System.Boolean)">
 <summary>
 Exit delayed rule-running mode.  Run all rules that were triggered by parameter changes or other events 
 while in delayed rule-running mode (unless the parameter RunRules is False).
 Rules within each document will be run in the order in which they are found in the document.
 </summary>
 <param name="RunRules"> 
 Set this to False to prevent the triggered rules from running.
 </param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.FileOptions">
 <summary>
 Gets an object from which the iLogic file and directory-related options can be examined or modified.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.SilentOperation">
 <summary>
 This is an iLogic-specific SilentOperation flag.  Normally when rules are run (in full Inventor or Inventor OEM),
  if any exceptions occur they will be shown in message dialogs.
 Set this to True if you don't want error messages to be displayed.
 (This property will always be True in Inventor Server.)
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.RuleExceptionsLog">
 <summary>
 Gets an object which may contain a log of rule exceptions.
 In a desktop Inventor session, this will usually be empty. Exception messages will be shown interactively and not logged.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.LogControl">
 <summary>
 Gets an object that provides control over the iLogic log (i.e. the rule logger).
 </summary>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.GetNamedEntities(Inventor.Document)">
 <summary>
 Gets the named entities in a document.
 </summary>
 <param name="document">The document. (Currently, only part document can contain named entities.)</param>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.GetRuleRunningOrderOption(Inventor.Document)">
 <summary>
 Gets the rule-running order option in a document.
 </summary>
 <param name="document">The document.</param>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.SetRuleRunningOrderOption(Inventor.Document,Autodesk.iLogic.Interfaces.RuleRunningOrder)">
 <summary>
 Sets the rule-running order option in a document.
 </summary>
 <remarks>
 Use <see cref="M:Autodesk.iLogic.Interfaces.IiLogicAutomation.GetRuleRunningOrderOption(Inventor.Document)"/> to get the current order.
 </remarks>
 <param name="document">The document.</param>
 <param name="order"></param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicAutomation.ExcelEngine">
 <summary>
 Gets and sets the type of Excel engine to be used by the GoExcel functions.
 </summary>
 <returns></returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.iLogicRule">
 <summary>
 Interface to an iLogic rule.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.iLogicRule.Name">
 <summary>
 Gets or sets the name of the rule.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.iLogicRule.IsActive">
 <summary>
 Suppresses or unsuppresses the rule. True if the rule is not suppressed.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.iLogicRule.FireDependentImmediately">
 <summary>
 Gets or sets an option that determines whether rules that are triggered to run by parameter changes in this rule will be run immediately,
 or after this rule finishes execution.
 </summary>
 <value>True if triggered rules should be run immediately.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.iLogicRule.AutomaticOnParamChange">
 <summary>
 Gets or sets an option that determines whether this rule will run automatically whenever its Inventor parameters are changed.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.iLogicRule.SilentOperation">
 <summary>
 Gets or sets the value of ThisApplication.SilentOperation that should be used while this rule is being run.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.iLogicRule.Text">
 <summary>
 Gets or sets the rule text (rule VB code).
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.NamedEntities">
 <summary>
 A collection of named entities (faces, edges, and vertices) and work features.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.NamedEntities.Entities">
 <summary>
 Gets all the named entities and work features in the collection.
 </summary>
 <returns>A NameValueMap. The items are the named entities and work features.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.NamedEntities.NameExists(System.String)">
 <summary>
 Returns true if the name exists in the collection.
 </summary>
 <param name="name"></param>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.NamedEntities.FindEntity(System.String)">
 <summary>
 Tries to find the entity with the given name. Throws an exception if no entity with that name exists.
 </summary>
 <param name="name"></param>
 <returns>A face, edge, vertex, work feature, or Nothing.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.NamedEntities.TryGetEntity(System.String)">
 <summary>
 Tries to find the entity with the given name. Returns Nothing if no entity with that name exists.
 </summary>
 <param name="name"></param>
 <returns>A face, edge, vertex, work feature, or Nothing.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.NamedEntities.GetName(System.Object)">
 <summary>
 Gets the name of an entity or work feature.
 </summary>
 <param name="entity">A face, edge, vertex, work feature, or drawing item.</param>
 <returns>The name. This will be Nothing if the entity has no name.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.NamedEntities.SetName(System.Object,System.String)">
 <summary>
 Applies the name to the entity or work feature.
 This will throw an exception if the name is already in use.
 </summary>
 <param name="name">The name.</param>
 <param name="entity">The face, edge, vertex or work feature to be named.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.NamedEntities.DeleteName(System.Object)">
 <summary>
 Deletes the name on the object, if it has one.
 (No error if it has no name.)
 </summary>
 <param name="entity">A face, edge, vertex or work feature.</param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.iLogicParameter">
 <summary>
 Interface to a Text or True/False parameter.
 </summary>
 <remarks>
 This is deprecated.  It is no longer needed in Inventor 2011 and beyond.  The Inventor.Parameter object supports Text and True/False parameters.
 </remarks>
</member>
<member name="T:Autodesk.iLogic.Interfaces.iLogicFileOptions">
 <summary>
 Options for external rule and referenced DLL folders.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.iLogicFileOptions.AddinDirectory">
 <summary>
 Gets or sets the directory path to be searched for DLLs that are referenced with the AddReference keyword.
 These are sometimes referred to as "iLogic addins".
 </summary>
 <returns>The directory path.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.iLogicFileOptions.ExternalRuleDirectories">
 <summary>
 Gets or sets an array of directory paths that are to be searched for external rules.
 </summary>
 <returns>An array of directory paths.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ExceptionLogEntry">
 <summary>
 An entry in the exception log.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ExceptionLogEntry.RuleName">
 <summary>
 Gets the rule name.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ExceptionLogEntry.LineNumber">
 <summary>
 Gets the rule line number on which the exception was thrown.
 If this is 0 or negative, then the line number is not known.
 This number will be valid only if the Context property is equal to ExceptionContext.RuleRunning.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ExceptionLogEntry.FullDocumentName">
 <summary>
 Gets the full document name. This will usually be the same as the full file name. (For assemblies, it may have a model state name appended.)
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ExceptionLogEntry.Context">
 <summary>
 Gets the context in which the exception was thrown.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ExceptionLogEntry.ExceptionType">
 <summary>
 Gets the exception type. This is a .NET type name including namespace (e.g. "System.ArgumentException").
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ExceptionLogEntry.Message">
 <summary>
 Gets the Exception.Message property from the exception.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ExceptionLogEntry.FullDetails">
 <summary>
 Gets the full details of the exception, including the stack trace. This is the result of Exception.ToString().
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ExceptionsLog">
 <summary>
 Stores an in-memory log of exceptions that have been thrown during rule execution.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ExceptionsLog.Exceptions">
 <summary>
 An IEnumerable of <see cref ="T:Autodesk.iLogic.Interfaces.ExceptionLogEntry"/> objects.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ExceptionsLog.Count">
 <summary>
 Gets the count of exception objects.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ExceptionsLog.Clear">
 <summary>
 Removes all exception objects from the log.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.LogControl">
 <summary>
 Options and methods that provide control of or access to the iLogic log.
 Messages can be written to the log by using the predefined Logger rule object in iLogic rules.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.LogControl.AutoDelete">
 <summary>
 If this is True, the log file will be deleted on a clean session exit.
 If False, then logs will be kept.
 Default: True.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.LogControl.Level">
 <summary>
 Gets and sets the level of logging messages wanted in the log.
 Set this to LogLevel.None to disable logging.
 Default: LogLevel.None.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.LogControl.Folder">
 <summary>
 Gets or sets the folder for the log file.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.LogControl.FullFileName">
 <summary>
 Gets the full path (folder and filename) of the current log file.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.LogControl.RuleEntryExitMessageLevel">
 <summary>
 If this is set to a level other than None, the log will contain messages for rule entry and exit,
 and for the events that cause the rules to run.
 Default: LogLevel.Trace.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.LogControl.SaveLogAs(System.String)">
 <summary>
 Save the current log to a file with the specified path.
 If the file exists already, it will be overwritten.
 </summary>
 <param name="path">The full path (folder and filename) of the file to be saved.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.LogControl.Log(Autodesk.iLogic.Interfaces.LogLevel,System.String,System.Object[])">
 <summary>
 Log a message.
 </summary>
 <param name="messageLevel">The log level for this message.</param>
 <param name="message">The message. It can contain String.Format-style placeholders.</param>
 <param name="args">An array of arguments for the String.Format placeholders.</param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.XmlSaveOption">
 <summary>
 Control the behavior of ParametersXmlSave.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.XmlSaveOption.KeysOnly">
 <summary>
 Save only Key Parameters to the XML file.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.XmlSaveOption.All">
 <summary>
 Save all parameters to the XML file.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ExceptionContext">
 <summary>
 Describes the context in which an exception occurred.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.ExceptionContext.None">
 <summary> Unknown context. </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.ExceptionContext.RuleRunning">
 <summary> The exception occurred while a rule was running. </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.ExceptionContext.RuleCompiling">
 <summary> The exception occurred during rule compilation. </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.ExceptionContext.EventDrivenRuleRunning">
 <summary> The exception occurred while an event-triggered rule was running. </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.ExceptionContext.RuleMigrating">
 <summary>
 The exception occurred while a rule was being migrated.
 This can happen only in rules that were created in Inventor 2010 or earlier versions.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.LogLevel">
 <summary>
 A classification for messages in the log.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.LogLevel.None">
 <summary>
 This means that logging is off: no messages will be logged.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.LogLevel.Trace">
 <summary>
 Detailed messages about iLogic operations: e.g. events, rule entry and exit.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.LogLevel.Debug">
 <summary>
 User defined debug messages.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.LogLevel.Info">
 <summary>
 User defined informational messages.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.LogLevel.Warn">
 <summary>
 User defined warning messages.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.LogLevel.Error">
 <summary>
 Errors from the iLogic system, plus user-defined error messages.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.LogLevel.Fatal">
 <summary>
 Fatal errors. This should only be used for messages that cause the Inventor process to terminate.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.RuleRunningOrder">
 <summary>
 Rule running order options.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.RuleRunningOrder.Legacy">
 <summary>
 The running order for rules triggered to run by other rules that was used in Inventor 2020 and earlier.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.RuleRunningOrder.Browser">
 <summary>
 When possible, run rules that are triggered to run by another rule in the order in which they are shown in the browser.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ExcelEngine">
 <summary>
 Choice of the Excel engine that the GoExcel functions will use.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.ExcelEngine.Internal">
 <summary>
 Use the internal Excel library that is installed with Inventor.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.ExcelEngine.COM">
 <summary>
 Use the Excel COM interface (through .NET interop).
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedItem`1">
 <summary>
 A generic managed item.
 </summary>
 <typeparam name="T"></typeparam>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedItem`1.Name">
 <summary>
 Gets the name of the item.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedItem`1.NativeEntity">
 <summary>
 Gets the native Inventor API entity that is being managed.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedCollectionWrapper`3.NativeEntity">
 <summary>
 Returns the native Inventor API collection that is wrapped.
 </summary>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedCollectionWrapper`3.ItemByName(System.String)">
 <summary>
 Gets the item with the given name. Throws an exception if none is found.
 </summary>
 <param name="name"></param>
 <remarks>
 This is called ItemByName to avoid collision with the Item property defined on the IReadOnlyList interface.
 In future, we might want to implement the IReadOnlyList interface on some of the same objects that implement this one.
 The method name ItemByName also occurs in the Inventor API.
 </remarks>
 <returns>The item.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedCollectionWrapper`3.ManagedItem(`2)">
 <summary>
 Returns the corresponding managed item for given native (Inventor API) item.
 Returns Nothing if it is not a managed or named item.
 </summary>
 <param name="nativeItem">The native item.</param>
 <returns>The corresponding managed or named item.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IStandardObjectProvider">
 <summary>
 Provides properties that work like the predefined objects in iLogic rules.
 Unlike the predefined objects, these can be applied to different Inventor documents.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.Parameter">
 <summary>
 Provides properties to get and set the values of Inventor parameters.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.iProperties">
 <summary>
  Provides properties to get and set iProperty values and physical properties (in a part or assembly).
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.MultiValue">
 <summary>
  Provides properties and functions for multivalue lists (lists of choices of parameter expressions).
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.Component">
 <summary>
 Provides properties and functions for assembly component occurrences.
 Note: the newer <see cref="T:Autodesk.iLogic.Interfaces.IManagedComponents"/> interface is recommended. It provides methods to add and remove components,
 instead of suppressing and unsuppressing them.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.Constraint">
 <summary>
 Provides properties and functions to suppress and unsuppress assembly constraints.
 The newer <see cref="T:Autodesk.iLogic.Interfaces.IManagedConstraints"/> interface provides methods for adding and deleting constraints.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.Joint">
 <summary>
 Provides properties and functions to suppress and unsuppress assembly joints.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.Feature">
 <summary>
 Provides properties and functions for features (in a part or assembly).
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.WorkPlane">
 <summary>
 Properties and functions for workplanes (in a part or assembly).
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.Sketch">
 <summary>
  Provides a function for a sketch (in a part or assembly).
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.Measure">
 <summary>
 Provides functions for a measuring distance, angle, and area (in a part or assembly).
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.iPart">
 <summary>
 Provides functions to find and change the current row of an iPart or iAssembly component.
 (This returns the same object as the <see cref="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.iAssembly"/> property.)
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.iAssembly">
 <summary>
 Provides functions to find and change the current row of an iPart or iAssembly component.
 (This returns the same object as the <see cref="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.iPart"/> property.)
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.iFeature">
 <summary>
  Provides functions to find and change the current row of an iFeature or sheet metal punch tool in a part.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.GoExcel">
 <summary>
 Provides functions properties to read and write data from Excel.
 If this property is used during the lifetime of the object that contains it,
 then the Dispose method should be called on the containing object.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.SheetMetal">
 <summary>
  Provides functions and properties for sheet metal parts.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.SharedVariable">
 <summary>
  Provides properties and functions for temporary objects that can be shared between iLogic rules in an Inventor session.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.iLogicVb">
 <summary>
  Provides properties and functions for access to the Inventor API, running other rules, and miscellaneous functions.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.InventorVb">
 <summary>
 Gets the same object as <see cref="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.iLogicVb"/>
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.iLogicForm">
 <summary>
  Provides functions to show (launch) predefined iLogic forms.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.Logger">
 <summary>
 Provides a logger that can be used in iLogic rules.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.ThisDocument">
 <summary>
  Provides properties and functions for access to the Inventor document in which the rule is running.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.ThisAssembly">
 <summary>
 Provides functions for managing components, patterns, and constraints in an assembly.
 If this property is used during the lifetime of the object that contains it,
 then the Dispose method should be called on the containing object.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.ThisDrawing">
 <summary>
 Provides functions for managing annotations in a drawing.
 Also provides access to sheets and views.
 If this property is used during the lifetime of the object that contains it,
 then the Dispose method should be called on the containing object.
 </summary>
 <remarks>
 Sample iLogic code:
 <code source=".\Samples\ManagedDrawingFromAssembly.iLogicVb"  language="vbnet"/>
 </remarks>
 <returns>A managed drawing object.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IStandardObjectProvider.ThisBom">
 <summary>
  Provides functions for access to the assembly BOM.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.StandardObjectFactory">
 <summary>
 Provides a method to create an object that implements the <see cref="T:Autodesk.iLogic.Interfaces.IStandardObjectProvider"/> interface.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.StandardObjectFactory.#ctor">
 <summary>
 Don't expose the default constructor.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.StandardObjectFactory.Create(Inventor.Document)">
 <summary>
 Creates a standard object provider based on the given document.
 </summary>
 <param name="document">The document to be used by iLogic standard objects that are properties of the created object.</param>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.StandardObjectFactory._CreatorFunction">
 <summary>
 Gets and sets the function that will create a standard object provider.
 For internal use only.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IParamDynamic">
 <summary>
 Provides properties to get and set the values of Inventor parameters.
 <para>
 In a rule, this interface is implemented by the predefined object named <c>Parameter</c>.
 </para>
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IParamDynamic.Value(System.String)">
 <summary>
 Gets or sets the value of a parameter. If the parameter is numeric (and not unitless), the value will be in the document units that are dimensionally the same as the parameter units.
 </summary>
 <param name="docAndParamName">Parameter name (with optional document name prefix).</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IParamDynamic.Value(System.Object,System.String)">
 <summary>
 Gets or sets the value of a parameter in a (referenced) document or component.
 </summary>
 <param name="componentOrDocName">The name of the component or document.</param>
 <param name="paramName">The parameter name.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IParamDynamic.ValueForEquals(System.String)">
 <summary>
 Gets or sets the value of a numeric parameter. If the parameter is numeric (and not unitless), the value will be in the document units that are dimensionally the same as the parameter units.
 The value is of the type DoubleForEquals, which is designed to be used for equality testing of numbers.
 </summary>
 <param name="docAndParamName">Parameter name (with optional document name prefix).</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IParamDynamic.ValueForEquals(System.Object,System.String)">
 <summary>
 Gets or sets the value of a numeric parameter in a (referenced) document or component.
 The value is of the type DoubleForEquals, which is designed to be used for equality testing of numbers.
 </summary>
 <param name="componentOrDocName">The name of the component or document.</param>
 <param name="paramName">The parameter name.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IParamDynamic.Param(System.String)">
 <summary>
 Gets the Inventor.Parameter object for the specified parameter name.
 </summary>
 <param name="docAndParamName">Parameter name (with optional document name prefix).</param>
 <returns>An Inventor.Parameter object</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IParamDynamic.Param(System.Object,System.String)">
 <summary>
 Gets the Inventor.Parameter object for the specified parameter name, within the specified component or document.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="paramName">The parameter name.</param>
 <value>An Inventor.Parameter object</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IParamDynamic.Quiet">
 <summary>
 If this is true, no exception (error) will be thrown by any of the Parameter functions when a parameter is not found.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IParamDynamic.UpdateAfterChange">
 <summary>
 If this is true, a document update will be performed automatically after a parameter is changed with a Parameter function (Parameter.Value) in the current rule.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IMultiValueParam">
 <summary>
  Provides properties and functions for multivalue lists (lists of choices of parameter expressions).
 <para>
 In a rule, this interface is implemented by the predefined object named <c>MultiValue</c>.
 </para>
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IMultiValueParam.SetList(System.String,System.Object[])">
 <summary>
 Sets the list of possible values for a parameter.
 </summary>
 <param name="parameterName">The name of the parameter.</param>
 <param name="args">The list of values.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IMultiValueParam.List(System.String)">
 <summary>
 Gets or sets the list of possible values for a parameter.
 </summary>
 <param name="parameterName">The name of the parameter.</param>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IMultiValueParam.List(System.Object,System.String)">
 <summary>
 Gets or sets the list of possible values for a parameter in a component or document.
 </summary>
 <param name="componentOrDocName">The name of the component occurrence or document.</param>
 <param name="parameterName">The name of the parameter.</param>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IMultiValueParam.FindValue(System.Collections.ICollection,System.String,System.Object,System.Double)">
 <summary>
 Tries to find a value in a list.
 </summary>
 <param name="valueList">A list of values.</param>
 <param name="operator">An operator for the test. Possible values are "=", "&lt;", "&gt;", "&lt;=" and "&gt;=".</param>
 <param name="value">The value to find.</param>
 <param name="tolerance">For numeric parameters, a tolerance value for equality tests.</param>
 <returns>The found value. This will be Nothing if the value is not found.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IMultiValueParam.SetValueOptions(System.Boolean,System.Int32,System.String)">
 <summary>
 Sets options for behavior when a multivalue list is changed.
 </summary>
 <param name="doSetValue">If this is true, when the list is changed then the parameter value will be changed (if necessary)
 to a value that is in the list.</param>
 <param name="DefaultIndex">For a string parameter, the index (0-based) in the list of the value to use by default.</param>
 <param name="NumericCompare">Not used.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IMultiValueParam.Quiet">
 <summary>
 If this is true, no error will be thrown when a parameter is not found.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IMultiValueParam.UpdateAfterChange">
 <summary>
 If this is true, a document update will be performed automatically after a parameter value is changed by a MultiValue operation in the current rule.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ICadComponent">
 <summary>
 Provides properties and functions for assembly component occurrences.
 <para>
 In a rule, this interface is implemented by the predefined object named <c>Component</c>.
 </para>
 </summary>
 <remarks>
 Note: the newer <see cref="T:Autodesk.iLogic.Interfaces.IManagedComponents"/> interface is recommended. It provides methods to add and remove components,
 instead of suppressing and unsuppressing them.
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadComponent.InventorComponent(System.Object)">
 <summary>
 Finds a component with the specified name in this assembly or in any subassemblies.
 </summary>
 <param name="componentName">The name (or path) of the component occurrence.</param>
 <value>An Inventor.ComponentOccurrence object.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadComponent.InventorComponentInThisContext(System.Object)">
 <summary>
 Finds a component with the specified name in this assembly or in any subassemblies.  
 Even if the component is found in a subassembly, the ComponentOccurrence returned will be in the context of this higher-level assembly
 (the assembly from which the rule is run).
 </summary>
 <param name="componentName">The name (or path) of the component occurrence.</param>
 <returns>An Inventor.ComponentOccurrence object.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadComponent.IsActive(System.Object)">
 <summary>
 Gets or sets a value to specify whether the component is active or not.
 If this is true, the specified component occurrence is active (unsuppressed).
 If this is false, the component is suppressed.
 </summary>
 <param name="componentName">The name (or path) of the component occurrence.</param>
 <value>True if the component occurrence is active.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadComponent.iComponentIsActive(System.Object)">
 <summary>
 Gets or sets a value to specify whether an iPart or iAssembly component is active or not.
 If this is true, the specified component occurrence is active (unsuppressed).
 If this is false, the component is suppressed.
 </summary>
 <param name="componentName">The component name. This can be in the non-standard format FactoryName:n</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadComponent.Color(System.Object)">
 <summary>
 Gets or sets the appearance (i.e. color or other appearance name) of a component occurrence.
 </summary>
 <param name="componentName">The name (or path) of the component occurrence.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadComponent.Visible(System.Object)">
 <summary>
 Gets or sets the visibility of a component occurrence.
 </summary>
 <param name="componentName">The name (or path) of the component occurrence.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadComponent.ActiveModelState(System.Object)">
 <summary>
 Gets or sets the active model state of a component occurrence.
 If the component has no model state this will return an empty string.
 </summary>
 <returns>The name of the active model state.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadComponent.SkipDocumentSave">
 <summary>
 If this is set to True, a component that is changed and then suppressed (by setting the Component.IsActive property to false) will not be saved to disk.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadComponent.AddDrawingName(System.String)">
 <summary>
 For future use.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadComponent.Replace(System.Object,System.String,System.Boolean,System.Boolean)">
 <summary>
 Replaces a component occurrence with a different document.
 </summary>
 <param name="componentName">The name (or path) of the component occurrence.</param>
 <param name="newFileName">The replacement filename. This should be a relative path if possible.</param>
 <param name="replaceAll">If this is true, all instances of the current document will be replaced.</param>
 <param name="ignoreError">If this is true, errors will be ignored durign the replace operation. The default is false.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadComponent.ReplaceiPart(System.Object,System.String,System.Boolean,System.Object,System.Object[])">
 <summary>
 Replaces an occurrence of an iPart. The replacement may be generated from a different factory.
 </summary>
 <param name="componentName">The name of the component occurrence to replace.</param>
 <param name="newFileName">The replacement filename. This should be a relative path if possible.</param>
 <param name="replaceAll">If this is true, all instances of the current document will be replaced.</param>
 <param name="rowSpec">A row number or name.</param>
 <param name="customInput">An optional list of custom parameter values</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadComponent.ReplaceBySuppression(System.Object,System.Object)">
 <summary>
 For future use.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IAssemConstraint">
 <summary>
 Provides properties and functions to suppress and unsuppress assembly constraints.
 <para>
 In a rule, this interface is implemented by the predefined object named <c>Constraint</c>.
 </para>
 </summary>
 <remarks>
 The newer <see cref="T:Autodesk.iLogic.Interfaces.IManagedConstraints"/> interface provides methods for adding and deleting constraints.
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IAssemConstraint.IsActive(System.String)">
 <summary>
 True if the constraint is active (unsuppressed).
 </summary>
 <param name="constraintName">The constraint name.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IAssemConstraint.IsActive(System.Object,System.String)">
 <summary>
 True if the constraint on a component occurrence or within a component document is active (unsuppressed).
 Note: to access a constraint *within* a component occurrence, use Constraint.IsActiveInSubassembly instead.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="constraintName">The constraint name.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IAssemConstraint.IsActiveInSubassembly(System.Object,System.String)">
 <summary>
 True if the constraint in a subassembly component occurrence is active (unsuppressed).
 </summary>
 <param name="componentName">The name of the subassembly component.</param>
 <param name="constraintName">The constraint name.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IAssemConstraint.iMateDefIsActive(System.String)">
 <summary>
 True if the given iMate definition is active (unsuppressed).
 </summary>
 <param name="iMateDefinitionName">The name of the iMate definition.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IAssemConstraint.iMateDefIsActive(System.Object,System.String)">
 <summary>
 True if the given iMate definition in a component occurrence or component document is active (unsuppressed).
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="iMateDefinitionName">The name of the iMate definition.</param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedConstraints">
 <summary>
 Provides functions to add, modify, and delete assembly constraints.
 <para>
 In a rule, this interface is implemented by the predefined object named <c>Constraints</c>
 (which is the same object as <c>ThisAssembly.Contraints</c>).
 </para>
 </summary>
 <remarks>
 Constraints can be managed using <see cref="M:Autodesk.iLogic.Interfaces.IManagedAssembly.BeginManage(System.String)"/> and <see cref="M:Autodesk.iLogic.Interfaces.IManagedAssembly.EndManage(System.String)"/>.
 <para>
 The <c>Add*</c> functions use entity names to identify the elements to be constrained. Unless iMates are being used,
 these are either:
 <list type="bullet">
   <item>Face, edge, or vertex names</item> 
   <item>Work feature names</item> 
 </list>
 Face, edge, and vertex names can be assigned in Inventor with right-click context menu commands.
 </para>
 <para>
 If you use work features or iMates, it's best to rename them. If you keep the default names, your rules may not work on a system that is 
 using a different language pack.
 </para>
 <para>
 The <c>Add*</c> functions have <see cref="T:Autodesk.iLogic.Types.ComponentArgument"/> arguments to specify the components that contain the entity to be constrained.
 See that topic for more details. An empty string (or Nothing) can be used for the <see cref="T:Autodesk.iLogic.Types.ComponentArgument"/> to refer to an entity (e.g. a workplane) 
 that is not in any component but is instead in the assembly itself.
 </para>
 <para>
 If a constraint name is specified, a constraint with that name will be created if it doesn't exist. If it does exist, the system will
 ensure that it meets the all the specifications in the current function call. If it already meets the specification, then no change
 is required. If it doesn't meet the specification, it will be modified so that it does. To do that, the system might have to
 delete the existing constraint and create a new one.
 </para>
 <para>
 Many of the methods have optional <c>biasPoint</c> arguments. These are passed to the underlying Inventor API methods
 (<c>AssemblyConstraints.AddMateConstraint</c> etc.) with no conversion. They can be of type <c>Inventor.Point</c>.
 </para>
 </remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedConstraints.AddByiMates(System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.ComponentArgument,System.String)">
 <summary>
 Adds or modifies a constraint between iMates.
 </summary>
 <param name="constraintName">The constraint name.</param>
 <param name="component1">The occurrence that contains the first iMate. Examples: "Part:1" or {"Subassembly:1", "Part:1"}.</param>
 <param name="iMateName1">The first iMate name.</param>
 <param name="component2">The occurrence that contains the second iMate. Examples: "Part:2" or {"Subassembly:2", "Part:2"}.</param>
 <param name="iMateName2">The second iMate name.</param>
 <returns>The constraint. This will contain an <c>iMateResult</c>, which in turn references one or more <c>AssemblyConstraint</c>
 objects. The type of the constraint(s) is determined by the type of the iMates.
 </returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedConstraints.AddByiMateAndEntity(System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Object,System.Boolean)">
 <summary>
 Adds or modifies a constraint between an iMate and an entity.
 </summary>
 <param name="constraintName">The constraint name.</param>
 <param name="component1">The occurrence that contains the iMate. Examples: "Part:1" or {"Subassembly:1", "Part:1"}.</param>
 <param name="iMateName1">The iMate name.</param>
 <param name="component2">The occurrence that contains the entity. Examples: "Part:2" or {"Subassembly:2", "Part:2"}.</param>
 <param name="entityName">The entity name. This can be named or work geometry.</param>
 <param name="entityBiasPoint">Helps in determining the initial position of the second occurrence.</param>
 <param name="angleEntityReversed">Used when creating an angle constraint. This argument specifies if the direction of the entity should be reversed or not.</param>
 <returns>The constraint. This will contain an <c>iMateResult</c>, which in turn references one or more <c>AssemblyConstraint</c>
 objects. The type of the constraint(s) is determined by the type of the iMates.
 </returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedConstraints.AddAngle(System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Object,Inventor.AngleConstraintSolutionTypeEnum,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Object,System.Object)">
 <summary>
 Adds or modifies an angle assembly constraint.
 </summary>
 <param name="constraintName">The constraint name.</param>
 <param name="component1">The occurrence that contains the first entity. Examples: "Part:1" or {"Subassembly:1", "Part:1"}.</param>
 <param name="entityName1">The first entity name. This can be named or work geometry.</param>
 <param name="component2">The occurrence that contains the second entity. Examples: "Part:2" or {"Subassembly:2", "Part:2"}.</param>
 <param name="entityName2">The second entity name. This can be named or work geometry.</param>
 <param name="angle">Optional input that defines the angle between the two input entities. This can be either a numeric value or a string.</param>
 <param name="solutionType">Optional input AngleConstraintSolutionTypeEnum that specifies the solution type.</param>
 <param name="refVecComponent">Optional input: the occurrence that contains the first refEntityName.</param>
 <param name="refEntityName">Optional name of an input object that provides a third entity to solve the angle constraint. This argument is ignored if the SolutionType argument is not kReferenceVectorSolution.</param>
 <param name="biasPoint1">Optional input object that is used to help in determining the initial position of the first occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <param name="biasPoint2">Optional input object that is used to help in determining the initial position of the second occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <returns>The constraint.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedConstraints.AddFlush(System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Object,System.Object,System.Object)">
 <summary>
 Adds or modifies a flush assembly constraint.
 </summary>
 <param name="constraintName">The constraint name.</param>
 <param name="component1">The occurrence that contains the first entity. Examples: "Part:1" or {"Subassembly:1", "Part:1"}.</param>
 <param name="entityName1">The first entity name. This can be named or work geometry.</param>
 <param name="component2">The occurrence that contains the second entity. Examples: "Part:2" or {"Subassembly:2", "Part:2"}.</param>
 <param name="entityName2">The second entity name. This can be named or work geometry.</param>
 <param name="offset">Optional input that defines the offset between the two input entities. This can be either a numeric value or a string. Default: 0</param>
 <param name="biasPoint1">Optional input object that is used to help in determining the initial position of the first occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <param name="biasPoint2">Optional input object that is used to help in determining the initial position of the second occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <returns>The constraint.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedConstraints.AddInsert(System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Boolean,System.Object,System.Boolean,System.Object,System.Object)">
 <summary>
 Adds or modifies an insert assembly constraint.
 </summary>
 <param name="constraintName">The constraint name.</param>
 <param name="component1">The occurrence that contains the first entity. Examples: "Part:1" or {"Subassembly:1", "Part:1"}.</param>
 <param name="entityName1">The first entity name. This can be named or work geometry.</param>
 <param name="component2">The occurrence that contains the second entity. Examples: "Part:2" or {"Subassembly:2", "Part:2"}.</param>
 <param name="entityName2">The second entity name. This can be named or work geometry.</param>
 <param name="axesOpposed">Optional input Boolean that specifies whether the direction of the axes of the input entities are in the same direction or opposed.</param>
 <param name="distance">Optional input that defines the offset between the two entities. This can be either a numeric value or a string. Default: 0.</param>
 <param name="lockRotation">Optional input Boolean that specifies whether the rotation is locked.</param>
 <param name="biasPoint1">Optional input object that is used to help in determining the initial position of the first occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <param name="biasPoint2">Optional input object that is used to help in determining the initial position of the second occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <returns>The constraint.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedConstraints.AddMate(System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Object,Inventor.InferredTypeEnum,Inventor.InferredTypeEnum,Inventor.MateConstraintSolutionTypeEnum,System.Object,System.Object)">
 <summary>
 Adds or modifies a mate assembly constraint.
 </summary>
 <param name="constraintName">The constraint name.</param>
 <param name="component1">The occurrence that contains the first entity. Examples: "Part:1" or {"Subassembly:1", "Part:1"}.</param>
 <param name="entityName1">The first entity name. This can be named or work geometry.</param>
 <param name="component2">The occurrence that contains the second entity. Examples: "Part:2" or {"Subassembly:2", "Part:2"}.</param>
 <param name="entityName2">The second entity name. This can be named or work geometry.</param>
 <param name="offset">Optional input that defines the offset between the two input entities. This can be either a numeric value or a string. Default: 0.</param>
 <param name="e1InferredType">Optional input constant that specifies how the geometry of entity one is to be interpreted.</param>
 <param name="e2InferredType">Optional input constant that specifies how the geometry of entity two is to be interpreted.</param>
 <param name="solutionType">Optional input MateConstraintSolutionTypeEnum that specifies the solution type.</param>
 <param name="biasPoint1">Optional input object that is used to help in determining the initial position of the first occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <param name="biasPoint2">Optional input object that is used to help in determining the initial position of the second occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <returns>The constraint.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedConstraints.AddRotate(System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Object,System.Boolean,System.Boolean,System.Object,System.Object)">
 <summary>
 Adds or modifies a rotate-rotate or rotate-translate assembly constraint.
 </summary>
 <param name="constraintName">The constraint name.</param>
 <param name="component1">The occurrence that contains the first entity. Examples: "Part:1" or {"Subassembly:1", "Part:1"}.</param>
 <param name="entityName1">The first entity name. This can be named or work geometry.</param>
 <param name="component2">The occurrence that contains the second entity. Examples: "Part:2" or {"Subassembly:2", "Part:2"}.</param>
 <param name="entityName2">The second entity name. This can be named or work geometry.</param>
 <param name="ratio">Optional input that defines the distance of translation for every revolution of the rotated occurrence. This can be either a numeric value or a string.</param>
 <param name="forwardDirection">Optional input Boolean that defines the direction of translation with respect to the rotation direction relative to the axes directions.</param>
 <param name="asRotateTranslate">Optional, True means that will be created rotate-translate constraint, otherwise rotate-rotate constraint.</param>
 <param name="biasPoint1">Optional input object that is used to help in determining the initial position of the first occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <param name="biasPoint2">Optional input object that is used to help in determining the initial position of the second occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <returns>The constraint.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedConstraints.AddSymmetry(System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Boolean,Inventor.InferredTypeEnum,Inventor.InferredTypeEnum)">
 <summary>
 Adds or modifies a symmetry assembly constraint.
 </summary>
 <param name="constraintName"></param>
 <param name="component1">The occurrence that contains the first entity. Examples: "Part:1" or {"Subassembly:1", "Part:1"}.</param>
 <param name="entityName1">The first entity name. This can be named or work geometry.</param>
 <param name="component2">The occurrence that contains the second entity. Examples: "Part:2" or {"Subassembly:2", "Part:2"}.</param>
 <param name="entityName2">The second entity name. This can be named or work geometry.</param>
 <param name="symmetryPlaneComponent">The occurrence that contains the symmetry plane.</param>
 <param name="symmetryPlane">The symmetry plane name. This can be a planar face or a work plane.</param>
 <param name="normalsOpposed">This argument only applies when the two entities are planar (planar face or work plane) and defines if the normal of the planar entities are oriented so they are opposed or aligned.</param>
 <param name="e1InferredType">Optional input constant that specifies how the geometry of the first entity is to be interpreted.</param>
 <param name="e2InferredType">Optional input constant that specifies how the geometry of the second entity is to be interpreted.</param>
 <returns>The constraint.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedConstraints.AddTangent(System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Boolean,System.Object,System.Object,System.Object)">
 <summary>
 Adds or modifies a tangent assembly constraint.
 </summary>
 <param name="constraintName">The constraint name.</param>
 <param name="component1">The occurrence that contains the first entity. Examples: "Part:1" or {"Subassembly:1", "Part:1"}.</param>
 <param name="entityName1">The first entity name. This can be named or work geometry.</param>
 <param name="component2">The occurrence that contains the second entity. Examples: "Part:2" or {"Subassembly:2", "Part:2"}.</param>
 <param name="entityName2">The second entity name. This can be named or work geometry.</param>
 <param name="insideTangency">Optional input Boolean that specifies the orientation of the surfaces at the tangent contact point of the surfaces.</param>
 <param name="offset">Optional input that defines the offset between the two input entities. This can be either a numeric value or a string. Default: 0.</param>
 <param name="biasPoint1">Optional input object that is used to help in determining the initial position of the first occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <param name="biasPoint2">Optional input object that is used to help in determining the initial position of the second occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <returns>The constraint.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedConstraints.AddTransitional(System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Object,System.Object)">
 <summary>
 Adds or modifies a transitional assembly constraint.
 </summary>
 <param name="constraintName">The constraint name.</param>
 <param name="component1">The occurrence that contains the first entity. Examples: "Part:1" or {"Subassembly:1", "Part:1"}.</param>
 <param name="entityName1">The first entity name. This can be named or work geometry.</param>
 <param name="component2">The occurrence that contains the second entity. Examples: "Part:2" or {"Subassembly:2", "Part:2"}.</param>
 <param name="entityName2">The second entity name. This can be named or work geometry.</param>
 <param name="biasPoint1">Optional input object that is used to help in determining the initial position of the first occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <param name="biasPoint2">Optional input object that is used to help in determining the initial position of the second occurrence. The occurrences are repositioned in an attempt to make the two bias points coincident.</param>
 <returns>The constraint.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedConstraints.AddUcsToUcs(System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Object,System.Object,System.Object,System.String[])">
 <summary>
 Adds or modifies a constraint set. This consists of three flush constraints between two items that are either User Coordinate Systems (UCS's),
 component origins, or the assembly origin.
 </summary>
 <param name="constraintName">The constraint name.</param>
 <param name="component1">The occurrence that contains the first entity. Examples: "Part:1" or {"Subassembly:1", "Part:1"}.</param>
 <param name="ucsName1">The name of the UCS in the first component. Use "origin" to refer to the origin instead of a UCS.</param>
 <param name="component2">The occurrence that contains the second entity. Examples: "Part:2" or {"Subassembly:2", "Part:2"}.</param>
 <param name="ucsName2">The name of the UCS in the second component. Use "origin" to refer to the origin instead of a UCS.</param>
 <param name="xOffset">Offset in the X direction (between the YZ planes). Default = 0.</param>
 <param name="yOffset">Offset in the Y direction (between the XZ planes). Default = 0.</param>
 <param name="zOffset">Offset in the Z direction (between the YZ planes). Default = 0.</param>
 <param name="linkedConstraintNames">
 Optional names to use for the two linked constraints. 
 If this is not specified, names will be generated.
 </param>
 <returns>The constraint.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedConstraints.Delete(System.String)">
 <summary>
 Deletes an assembly constraint.
 There is no error if the constraint does not exist (maybe because it was already deleted).
 </summary>
 <param name="constraintName">The constraint name.</param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IAssemJoint">
 <summary>
 Provides properties and functions to suppress and unsuppress assembly joints.
 <para>
 In a rule, this interface is implemented by the predefined object named <c>Joint</c>.
 </para>
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IAssemJoint.IsActive(System.String)">
 <summary>
 True if the joint is active (unsuppressed).
 </summary>
 <param name="jointName">The joint name.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IAssemJoint.IsActive(System.Object,System.String)">
 <summary>
 True if the joint on a component occurrence or within a component document is active (unsuppressed).
 Note: to access a joint *within* a component occurrence, use Joint.IsActiveInSubassembly instead.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="jointName">The joint name.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IAssemJoint.IsActiveInSubassembly(System.Object,System.String)">
 <summary>
 True if the joint in a subassembly component occurrence is active (unsuppressed).
 </summary>
 <param name="componentName">The name of the subassembly component.</param>
 <param name="jointName">The joint name.</param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ICadFeature">
 <summary>
 Provides properties and functions for features (in a part or assembly).
 <para>
 In a rule, this interface is implemented by the predefined object named <c>Feature</c>.
 </para>
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.InventorFeature(System.String)">
 <summary>
 Gets an Inventor Feature object by name. Throws an error if it is not found.
 </summary>
 <param name="featureName">The name of the feature.</param>
 <value>The feature that was found.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.InventorFeature(System.Object,System.String)">
 <summary>
 Gets an Inventor Feature object by name. Throws an error if it is not found.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="featureName">The name of the feature.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.IsActive(System.String)">
 <summary>
 True if the feature is active (unsuppressed).
 </summary>
 <param name="featureName">The name of the feature.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.IsActive(System.Object,System.String)">
 <summary>
 True if the feature is active (unsuppressed).
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="featureName">The name of the feature.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.Sketch(System.Object,System.String)">
 <summary>
 Gets or sets the sketch that drives a feature.
 </summary>
 <remarks>This is not working, and it never worked. It could probably be removed.</remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.Color(System.String)">
 <summary>
 Gets or sets the appearance name (which may be a color) for a feature.
 </summary>
 <param name="featureName">The feature name.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.Color(System.Object,System.String)">
 <summary>
 Gets or sets the appearance name (which may be a color) for a feature in a component or document.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="featureName">The feature name.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.ThreadType(System.String)">
 <summary>
 Gets the thread type (e.g. "ANSI Unified Screw Threads") of a threaded feature.
 To change the type, use the SetThread function.
 </summary>
 <param name="featureName">The feature name.</param>
 <value>The thread type.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.ThreadType(System.Object,System.String)">
 <summary>
 Gets the thread type of a threaded feature.
 To change the type, use the SetThread function.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="featureName">The feature name.</param>
 <value>The thread type (e.g. "ANSI Unified Screw Threads").</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.ThreadDesignation(System.String)">
 <summary>
 Gets or sets the thread designation of a thread or threaded feature.
 </summary>
 <param name="featureName">The feature name.</param>
 <value>The thread designation (e.g. "1/2-13 UNC").</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.ThreadDesignation(System.Object,System.String)">
 <summary>
 Gets or sets the thread designation of a thread or threaded feature.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="featureName">The feature name.</param>
 <value>The thread designation (e.g. "1/2-13 UNC").</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.ThreadClass(System.String)">
 <summary>
 Gets or sets the thread designation of a thread or threaded feature.
 </summary>
 <param name="featureName">The feature name.</param>
 <value>The thread designation (e.g. "1/2-13 UNC").</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadFeature.ThreadClass(System.Object,System.String)">
 <summary>
 Gets or sets the thread designation of a thread or threaded feature.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="featureName">The feature name.</param>
 <value>The thread designation (e.g. "1/2-13 UNC").</value>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadFeature.SetThread(System.String,System.String,System.String,System.String)">
 <summary>
 Sets the type, designation, and class of a thread on a feature.
 This function must be used if you want to modify more than one of these thread properties.
 </summary>
 <param name="featureName">The feature name.</param>
 <param name="threadType"></param>
 <param name="threadDesignation"></param>
 <param name="threadClass"></param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadFeature.SetThread(System.Object,System.String,System.String,System.String,System.String)">
 <summary>
 Sets the type, designation and class of a thread on a feature.
 This function must be used if you want to modify more than one of these thread properties.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="featureName">The feature name.</param>
 <param name="threadType"></param>
 <param name="threadDesignation"></param>
 <param name="threadClass"></param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ICadWorkPlane">
 <summary>
 Properties and functions for workplanes (in a part or assembly).
 <para>
 In a rule, this interface is implemented by the predefined object named <c>WorkPlane</c>.
 </para>
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadWorkPlane.FlipNormal(System.String,System.String)">
 <summary>
 Flip (reverse) the normal vector of the workplane if its direction does not agree with the specified axis.
 If a sketch is built on the plane, it will be flipped over as well.
 </summary>
 <param name="workPlaneName">The name of the workplane.</param>
 <param name="refAxisName">An axis name with optional negative or positive sign, e.g. "+X" or "-Y" or "+Z".</param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ICadSketch">
 <summary>
  Provides a function for a sketch (in a part or assembly).
  <para>
 In a rule, this interface is implemented by the predefined object named <c>Sketch</c>.
  </para>
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadSketch.Redefine(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>
 Redefine a sketch.
 This function is most effective for self-contained sketches that do not contain any projected geometry.
 </summary>
 <param name="sketchName">The name of the sketch.</param>
 <param name="planeName">The name of an entity to use as the sketch plane.</param>
 <param name="originName">The name of an entity to use as the origin point of the sketch.</param>
 <param name="axisName">The name of an entity to use as a sketch axis (either X or Y axis). </param>
 <param name="AxisIsX">The default value of True indicates that the sketch axis specified by axisName is the X (horizontal) axis. False indicates that the axis is the Y (vertical) axis. </param>
 <param name="NaturalAxisDirection">The default value of True indicates that the sketch axis is in the same direction as the axisName entity. False indicates that the sketch axis is in the opposite direction.</param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ICadMeasure">
 <summary>
 Provides functions for a measuring distance, angle, and area (in a part or assembly).
 <para>
 In a rule, this interface is implemented by the predefined object named <c>Measure</c>.
 </para>
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadMeasure.MinimumDistance(System.Object,System.Object)">
 <summary>
 Measures the minimum distance between two entities. The entities can be work features or iMates.
 </summary>
 <param name="entityName1">The name of the first entity.</param>
 <param name="entityName2">The name of the second entity.</param>
 <returns>The distance in document length units.</returns>
 <remarks>Note: this function only works on desktop editions of Inventor.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadMeasure.MinimumDistance(System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Measures the minimum distance between two entities in assembly components. The entities can be work features or iMates.
 </summary>
 <param name="componentName1">The name (or path) of the first component occurrence.</param>
 <param name="entityName1">The name of the first entity.</param>
 <param name="componentName2">The name (or path) of the second component occurrence.</param>
 <param name="entityName2">The name of the second entity.</param>
 <returns>The distance in document length units.</returns>
 <remarks>Note: this function only works on desktop editions of Inventor.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadMeasure.Angle(System.Object,System.Object,System.Object)">
 <summary>
 Measures the angle between two entities. The entities can be work features or iMates.
 This can also be used to get the angle formed by three points.
 </summary>
 <param name="entityName1">The name of the first entity.</param>
 <param name="entityName2">The name of the second entity.</param>
 <param name="entityName3">The name of the third entity.</param>
 <returns>The angle in document angle units.</returns>
 <remarks>See the MeasureTools.GetAngle method in the Inventor API help.
 Note: this function only works on desktop editions of Inventor.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadMeasure.Angle(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Measures the angle between two entities. The entities can be work features or iMates.
 This can also be used to get the angle formed by three points.
 </summary>
 <param name="componentName1">The name (or path) of the first component occurrence.</param>
 <param name="entityName1">The name of the first entity.</param>
 <param name="componentName2">The name (or path) of the first component occurrence.</param>
 <param name="entityName2">The name of the second entity.</param>
 <param name="componentName3">The name (or path) of the first component occurrence.</param>
 <param name="entityName3">The name of the third entity.</param>
 <returns>The angle in document angle units.</returns>
 <remarks>See the MeasureTools.GetAngle method in the Inventor API help.
 Note: this function only works on desktop editions of Inventor.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadMeasure.Area(System.String)">
 <summary>
 Measures the area of a sketch.
 </summary>
 <param name="sketchName">The name of the sketch.</param>
 <returns>The area in document length units squared.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadMeasure.Perimeter(System.String)">
 <summary>
 Measures the perimeter of a sketch.
 </summary>
 <param name="sketchName">The name of the sketch.</param>
 <returns>The perimeter in document length units.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadMeasure.ExtentsLength">
 <summary>
 Measures the extents of the document geometry in the X direction.
 This is the size along the X axis of a rectangular box that is guaranteed to enclose the geometry.
 It may be greater than the true extents.
 </summary>
 <returns>The length (X extents) in document length units.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadMeasure.ExtentsWidth">
 <summary>
 Measures the extents of the document geometry in the Y direction.
 This is the size along the Y axis of a rectangular box that is guaranteed to enclose the geometry.
 It may be greater than the true extents.
 </summary>
 <returns>The width (Y extents) in document length units.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadMeasure.ExtentsHeight">
 <summary>
 Measures the extents of the document geometry in the Z direction.
 This is the size along the Z axis of a rectangular box that is guaranteed to enclose the geometry.
 It may be greater than the true extents.
 </summary>
 <returns>The height (Z extents) in document length units.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadMeasure.PreciseExtentsLength">
 <summary>
 Measures the precise extents of the document geometry in the X direction.
 This is the size along the X axis of a rectangular box that tightly encloses the geometry.
 </summary>
 <returns>The length (X extents) in document length units.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadMeasure.PreciseExtentsWidth">
 <summary>
 Measures the precise extents of the document geometry in the Y direction.
 This is the size along the Y axis of a rectangular box that tightly encloses the geometry.
 </summary>
 <returns>The width (Y extents) in document length units.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadMeasure.PreciseExtentsHeight">
 <summary>
 Measures the precise extents of the document geometry in the Z direction.
 This is the size along the Z axis of a rectangular box that tightly encloses the geometry.
 </summary>
 <returns>The height (Z extents) in document length units.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IiProperties">
 <summary>
  Provides properties to get and set iProperty values and physical properties (in a part or assembly).
  <para>
 In a rule, this interface is implemented by the predefined object named <c>iProperties</c>.
  </para>
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Expression(System.String,System.String)">
 <summary>
 Gets or sets the expression of an iProperty.
 The value will be String.
 </summary>
 <param name="setName">The name of the iProperty set, e.g. "Project", "Custom", etc.</param>
 <param name="propertyName">The name of the iProperty.</param>
 <value>The iProperty expression.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Expression(System.Object,System.String,System.String)">
 <summary>
 Gets or sets the expression of an iProperty in a component or document.
 The value will be String.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="setName">The name of the iProperty set, e.g. "Project", "Custom", etc.</param>
 <param name="propertyName">The name of the iProperty.</param>
 <value>The iProperty expression.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Value(System.String,System.String)">
 <summary>
 Gets or sets the value of an iProperty.
 The value can be a String, Double, Date or Boolean.
 Note: the type of the iProperty can be changed by setting this value.
 </summary>
 <param name="setName">The name of the iProperty set, e.g. "Project", "Custom", etc.</param>
 <param name="propertyName">The name of the iProperty.</param>
 <value>The iProperty value.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Value(System.Object,System.String,System.String)">
 <summary>
 Gets or sets the value of an iProperty in a component or document.
 The value can be a String, Double, Date or Boolean.
 Note: the type of the iProperty can be changed by setting this value.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <param name="setName">The name of the iProperty set, e.g. "Project", "Custom", etc.</param>
 <param name="propertyName">The name of the iProperty.</param>
 <value>The iProperty value.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.InstanceValue(System.Object,System.String)">
 <summary>
 Gets or sets the value of an instance property on a component occurrence.
 The value can be a String, Double, Date or Boolean.
 If you set the value of an instance property that does not already exist, it will be created.
 Note: the type of the property (Text, Number, etc.) can be changed by setting this value.
 </summary>
 <param name="componentName">The component name.</param>
 <param name="propertyName">The name of the instance property.</param>
 <value>The property value.</value>
 <remarks>
 <para>
 Sample code:
 <code>
 iProperties.InstanceValue("PartX:1", "Side") = "Left"
 Dim partX1Side = iProperties.InstanceValue("PartX:1", "Side")
 </code>
 </para>
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.InstanceExpression(System.Object,System.String)">
 <summary>
 Gets or sets the expression of an instance property on a component occurrence.
 If you set the expression of an instance property that does not already exist, it will be created.
 </summary>
 <param name="componentName">The component name.</param>
 <param name="propertyName">The name of the instance property.</param>
 <value>The property expression.</value>
 <remarks>
 <para>
 Sample code:
 <code>
 iProperties.InstanceValue("PartX:5", "Column") = "B"
 iProperties.InstanceValue("PartX:5", "Row") = "2"
 iProperties.InstanceExpression("PartX:5", "Cell position") = "=&lt;Column&gt;&lt;Row&gt;"
 Dim partX1Expression = iProperties.InstanceExpression("PartX:5", "Cell position")
 </code>
 </para>
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Material">
 <summary>
 Gets or sets the material of the part in which the rule is running.
 Note: this will only work in a part.
 </summary>
 <value>The material name.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Material(System.Object)">
 <summary>
 Gets or sets the material of a part. The part can be specified by using a component name or a document name.
 Note: this will only work on a component that is a part.
 </summary>
 <value>The material name.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.PartColor">
 <summary>
 Gets or sets the appearance (which may be a color) of the part in which the rule is running.
 </summary>
 <value>The name of the appearance (which may be a color).</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Materials">
 <summary>
 Get a list of the names of materials available in the current part or assembly.
 </summary>
 <returns>A list of names of materials.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Mass">
 <summary>
 Gets or sets (overrides) the total mass of the part or assembly.
 </summary>
 <value>The mass in document units.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Mass(System.Object)">
 <summary>
 Gets or sets (overrides) the mass of a component or document.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <value>The mass in document units.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Volume">
 <summary>
 Gets or sets (overrides) the total volume of the part or assembly.
 </summary>
 <value>The volume in document units.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Volume(System.Object)">
 <summary>
 Gets or sets (overrides) the volume of a component or document.
 </summary>
 <param name="componentOrDocName">The component or document name.</param>
 <value>The volume in document units.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.CenterOfGravity">
 <summary>
 Gets the center of gravity (center of mass) of the entire part or assembly.
 </summary>
 <value>The center of gravity, in document length units.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.CenterOfGravity(System.Object)">
 <summary>
 Gets the center of gravity (center of mass) of a component or document.
 </summary>
 <value>The center of gravity, in the length units of the current document.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Area">
 <summary>
 Gets the total surface area of the current part or assembly.
 </summary>
 <value>The area, in document length units squared.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.Area(System.Object)">
 <summary>
 Gets the surface area of a component or document.
 </summary>
 <value>The area, in the squared length units of the current document.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiProperties.StylesInEnglish">
 <summary>
 Gets or sets a value that affects several iProperties functions. 
 If this is set to True, the functions that return a material or appearance (color) name will return the name in English.
 This can be used to make rules more portable.
 The default is False.
 </summary>
 <returns></returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IiPartRowChanger">
 <summary>
  Provides functions to find and change the current row of an iPart or iAssembly component.
  <para>
 In a rule, this interface is implemented by the predefined object named <c>iPart</c> and also <c>iAssembly</c>. These are two references to the same object.
  </para>
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiPartRowChanger.Tolerance">
 <summary>
 Gets or sets a value that is used for numeric equality tests in the FindRow function.
 If the difference between two numbers is less than or equal to the tolerance, they will be considered to be equal.
 The default tolerance is 0.0000001.
 </summary>
 <value>The tolerance.</value>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiPartRowChanger.ChangeRow(System.Object,System.Object,System.Object[])">
 <summary>
 Selects (activates) a row in the iPart (or iAssembly) table of a component occurrence or a factory.
 </summary>
 <param name="componentName">The component name or path. If this is an empty string, the current document (which must be an iPart or iAssembly factory) will be used.</param>
 <param name="rowSpec">A row index (integer) or member name (string).</param>
 <param name="customInput">An array of custom input for the ComponentOccurrence.ChangeRowOfiPartMember function.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiPartRowChanger.FindRow(System.Object,System.Object[])">
 <summary>
 Finds and selects (activates) a row in the iPart (or iAssembly) table of a component occurrence or a factory.
 </summary>
 <param name="componentName">The component name or path. If this is an empty string, the current document (which must be an iPart or iAssembly factory) will be used.</param>
 <param name="sizeArgs">A list of column header names, operators, and values, e.g. "Dia", "=", 0.5, "Length", "=", 2.0. </param>
 <returns>If a matching row is found, the row index is returned. If not, a value of -1 will be returned.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiPartRowChanger.Members(System.Object)">
 <summary>
 Gets a list of member names from the table.
 </summary>
 <param name="componentName">The component name or path.</param>
 <remarks>Not implemented.</remarks>
 <returns>A list of names</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiPartRowChanger.RowName(System.Object)">
 <summary>
 Gets the current row member name.
 </summary>
 <param name="componentName">The component name or path.</param>
 <returns>The member name.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiPartRowChanger.RowNumber(System.Object)">
 <summary>
 Gets the current row index number (1-based).
 </summary>
 <param name="componentName">The component name or path.</param>
 <returns>The row index number.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiPartRowChanger.CurrentRowStringValue(System.String)">
 <summary>
 Gets the string value of the cell at the specified column in the current row.
 (To set the current row, use either ChangeRow or FindRow.)
 </summary>
 <param name="columnName">The column header name.</param>
 <returns>The cell value.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiPartRowChanger.CurrentRowValue(System.String)">
 <summary>
 Gets the numeric value of the cell at the specified column in the current row.
 (To set the current row, use either ChangeRow or FindRow.)
 </summary>
 <param name="columnName">The column header name.</param>
 <returns>The cell value.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IiFeatureRowChanger">
 <summary>
  Provides functions to find and change the current row of an iFeature or sheet metal punch tool in a part.
  <para>
 In a rule, this interface is implemented by the predefined object named <c>iFeature</c>.
 </para>
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiFeatureRowChanger.Tolerance">
 <summary>
 Gets or sets a value that is used for numeric equality tests in the FindRow function.
 If the difference between two numbers is less than or equal to the tolerance, they will be considered to be equal.
 The default tolerance is 0.0000001.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiFeatureRowChanger.ChangeRow(System.String,System.Object)">
 <summary>
 Selects (activates) a row in an iFeature or sheet metal punch tool.
 </summary>
 <param name="featureName">The name of the iFeature or sheet metal punch tool.</param>
 <param name="rowSpec">A row index (integer) or member name (string).</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiFeatureRowChanger.FindRow(System.String,System.Object[])">
 <summary>
 Finds and selects (activates) a row in an iFeature or sheet metal punch tool.
 </summary>
 <param name="featureName">The name of the iFeature or sheet metal punch tool.</param>
 <param name="sizeArgs">A list of column header names, operators, and values, e.g. "Dia", "=", 0.5, "Length", "=", 2.0. </param>
 <returns>If a matching row is found, the row index is returned. If not, a value of -1 will be returned.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiFeatureRowChanger.CurrentRowStringValue(System.String)">
 <summary>
 Gets the text string value of the cell at the specified column in the current row.
 (To set the current row, use either ChangeRow or FindRow.)
 </summary>
 <param name="columnName">The column header name.</param>
 <returns>The cell value.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiFeatureRowChanger.CurrentRowValue(System.String)">
 <summary>
 Gets the numeric value of the cell at the specified column in the current row.
 (To set the current row, use either ChangeRow or FindRow.)
 </summary>
 <param name="columnName">The column header name.</param>
 <returns>The cell value.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IGoExcel">
 <summary>
  Provides functions properties to read and write data from Excel.
  <para>
 In a rule, this interface is implemented by the predefined object named <c>GoExcel</c>.
  </para>
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IGoExcel.Application">
 <summary>
 Gets the Excel Application object (of the type Microsoft.Office.Interop.Excel.Application).
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IGoExcel.DisplayAlerts">
 <summary>
 Gets or sets a property of the Excel application. If this is True, alert dialogs will be displayed.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IGoExcel.Tolerance">
 <summary>
 Gets or sets a value that is used for numeric equality tests in the FindRow function.
 If the difference between two numbers is less than or equal to the tolerance, they will be considered to be equal.
 The default tolerance is 0.0000001.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGoExcel.Open(System.String,System.String)">
 <summary>
 Opens the specified Excel workbook, and optionally sets the named worksheet as the current sheet.
 </summary>
 <param name="fileName">The relative or absolute filename of the Excel workbook. (Relative paths are recommended.)</param>
 <param name="sheetName">The name of the worksheet.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGoExcel.SetCurrentSheet(System.String,System.String)">
 <summary>
 Sets the current sheet of the specified Excel workbook.
 </summary>
 <param name="fileName">The relative or absolute filename of the Excel workbook. (Relative paths are recommended.)</param>
 <param name="sheetName">The name of the worksheet.</param>
 <returns>Zero if the operation was successful.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGoExcel.FindColumn(System.String)">
 <summary>
 Find a column by name. The name is the value of the cell in the TitleRow.
 </summary>
 <param name="columnName">The column name to look for.</param>
 <returns>The column index (1-based). If the column is not found, an exception (error) will be thrown.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGoExcel.FindColumn(System.String,System.Int32)">
 <summary>
 Find a column by name. The name is the value of the cell in the TitleRow.
 </summary>
 <param name="columnName">The column name to look for.</param>
 <param name="startColumn">The column index (1-based) in which to start the search.</param>
 <returns>The column index (1-based). If the column is not found, an exception (error) will be thrown.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGoExcel.FindRow(System.String,System.String,System.Object[])">
 <summary>
 Finds and selects a row that matches the given values.
 </summary>
 <param name="fileName">The relative or absolute filename of the Excel workbook. (Relative paths are recommended.)</param>
 <param name="sheetName">The name of the worksheet.</param>
 <param name="sizeArgs">A list of column header names, operators, and values, e.g. "Dia", "=", 0.5, "Length", "=", 2.0. </param>
 <returns>If a matching row is found, the row index is returned. If not, a value of -1 will be returned.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IGoExcel.TitleRow">
 <summary>
 Gets or sets the index (1-based) of the title row. The title row is the row that contains the column names.
 The default value is 1.
 </summary>
 <returns>The index of the title row.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IGoExcel.FindRowStart">
 <summary>
 Gets or sets the index (1-based) of the first row to search wit hthe FindRow function. This must be creater than the TitleRow.
 The default value is 2.
 </summary>
 <returns>The index of the first row to search.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGoExcel.CurrentRowValue(System.String)">
 <summary>
 Gets the value of the cell at the specified column in the current row.
 (Use FindRow to set the current row.)
 </summary>
 <param name="columnName">The column header name.</param>
 <returns>The cell value.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IGoExcel.CellValue(System.String,System.String,System.String)">
 <summary>
 Gets or sets the value of the cell at the specified address.
 </summary>
 <param name="fileName">The relative or absolute filename of the Excel workbook. (Relative paths are recommended.)</param>
 <param name="sheetName">The name of the worksheet.</param>
 <param name="cellAddress">Cell address (e.g. "A1")</param>
 <value>The value of the cell (may be numeric, a text string, a Boolean value, or Nothing).</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IGoExcel.CellValue(System.String)">
 <summary>
 Gets or sets the value of the cell at the specified address in the current workbook and worksheet.
 </summary>
 <param name="cellAddress">Cell address (e.g. "A1")</param>
 <value>The value of the cell (may be numeric, a text string, a Boolean value, or Nothing).</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IGoExcel.CellValues(System.String,System.String,System.String,System.String)">
 <summary>
 Gets or sets the values of a range of cells from a single column or row.
 </summary>
 <param name="fileName">The relative or absolute filename of the Excel workbook. (Relative paths are recommended.)</param>
 <param name="sheetName">The name of the worksheet.</param>
 <param name="startCellAddress">The starting cell address (e.g. "A1"). This cell will be included in the result.</param>
 <param name="endCellAddress">The ending cell address (e.g. "A5"). This cell will be included in the result.</param>
 <value>A list of cell values. Values may be numeric, text strings, Boolean values, or Nothing).</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IGoExcel.CellValues(System.String,System.String)">
 <summary>
 Gets or sets the values of a range of cells from a single column or row.
 </summary>
 <param name="startCellAddress">The starting cell address (e.g. "A1"). This cell will be included in the result.</param>
 <param name="endCellAddress">The ending cell address (e.g. "A5"). This cell will be included in the result.</param>
 <value>A list of cell values. Values may be numeric, text strings, Boolean values, or Nothing).</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IGoExcel.NamedRangeValue(System.String)">
 <summary>
 Gets or sets the value of a named range. Named ranges are defined in the Excel file.
 </summary>
 <param name="name">The name of the range</param>
 <value>If the range refers to a single cell, this will be a single object. Otherwise it will be an array.</value>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGoExcel.Save">
 <summary>
 Saves the Excel file that is currently open (if any).
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGoExcel.Close">
 <summary>
 Closes the Excel file that is currently open (if any).
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGoExcel.ClearCache">
 <summary>
 Clear the internal cache used by FindRow and CurrentRowValue.  This cache is not used by CellValue and related functions.
 It is a global cache, and it persists when rules are not being run.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGoExcel.QuitApplication">
 <summary>
 Quits the Excel application that is used by the GoExcel functions.
 In most cases it is not necessary to call this function.
 This should be called only if a rule has used the Excel API directly to change the Excel application state, and you don't want this state to carry forward into other rules.
 Call this only as the last GoExcel function in a rule.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGoExcel.ChangeSourceOfLinked(System.String,System.String)">
 <summary>
 Replace the Excel file that is currently a source of linked parameters with another file.
 This is similar to the Change Source command on the context menu in the UI.
 </summary>
 <param name="partialOldName">
 A substring of the name that is to be matched.
 The first file that has this string in the name will be selected for replacement.
 Choose  a substring that will not be changed by the replacement operation (i.e. something in common to all replacement file names).
 To match the first linked file regardless of name, use an empty string.
 </param>
 <param name="newName">
 The path (folder and filename) to the replacement file. This can be a relative or absolute path name.
 Relative path names are recommended.
 </param>
 <returns>True if the operation succeeded.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ISheetMetal">
 <summary>
  Provides functions and properties for sheet metal parts.
  <para>
 In a rule, this interface is implemented by the predefined object named <c>SheetMetal</c>.
  </para>
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ISheetMetal.SetActiveStyle(System.String,System.Double)">
 <summary>
 Set the active Sheet Metal Rule.
 </summary>
 <param name="styleName">The name of the rule. (Not case-sensitive.)</param>
 <param name="kFactor">This is obsolete: the K factor (if applicable) associated with the rule will be used.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ISheetMetal.GetActiveStyle">
 <summary>
 Gets the name of the active sheet metal style.
 </summary>
 <returns>The name of the style.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ISheetMetal.ActiveKFactor">
 <summary>
 Gets the active KFactor. This value will be valid only if the unfoldign method is linear.
 </summary>
 <returns>The active KFactor.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ISheetMetal.FlatExtentsLength">
 <summary>
 Gets the length (dimension along the X axis) of the flat pattern.
 If there is no flat pattern, this function will create it.
 </summary>
 <returns>The length in document units.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ISheetMetal.FlatExtentsWidth">
 <summary>
 Gets the width (dimension along the Y axis) of the flat pattern.
 If there is no flat pattern, this function will create it.
 </summary>
 <returns>The width in document units.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ISheetMetal.FlatExtentsArea">
 <summary>
 Gets the area (length times width) of the flat pattern.
 If there is no flat pattern, this function will create it.
 </summary>
 <returns>The area in document units squared.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ISharedVariable">
 <summary>
  Provides properties and functions for temporary objects that can be shared between iLogic rules in an Inventor session.
  <para>
 In a rule, this interface is implemented by the predefined object named <c>SharedVariable</c>.
  </para>
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ISharedVariable.Value(System.String)">
 <summary>
 Gets or sets the value of a shared temporary variable.
 If a variable with the given name does not already exist, setting a value will create the variable and then set its value.
 </summary>
 <param name="name">The name of the shared variable.</param>
 <value>The value of the variable.</value>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ISharedVariable.Exists(System.String)">
 <summary>
 Gets a value that indicates whether a shared variable with the given name exists in the current session.
 </summary>
 <param name="name">The name of the shared variable.</param>
 <returns>True if the variable exists.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ISharedVariable.Remove(System.String)">
 <summary>
 Removes (deletes) the specified temporary variable.
 </summary>
 <param name="name">The name of the variable.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ISharedVariable.RemoveAll">
 <summary>
 Removes (deletes) all variables in the current session.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ILowLevelSupport">
 <summary>
  Provides properties and functions for access to the Inventor API, running other rules, and miscellaneous functions.
  <para>
 In a rule, this interface is implemented by two predefined object identifiers: <c>iLogicVb</c> and <c>InventorVb</c>.
 Each of those is a reference to the same object.
  </para>
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ILowLevelSupport.Application">
 <summary>
 Gets the Inventor Application object.
 </summary>
 <returns></returns>
 <remarks>On desktop Inventor, this will always be a valid object.
 But on Inventor Server (which might be running in a web service), this will be Nothing (null in C#).</remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ILowLevelSupport.InventorServer">
 <summary>
 Gets the Inventor Server object. This provides a subset of the functionality of the Application object.
 On web service or other Inventor Server deployments, the Application object is not available.
 This object must be used instead.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ILowLevelSupport.RuleDocument">
 <summary>
 Gets the document from which this rule is being run. If the rule is stored within a document, this will be that document.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ILowLevelSupport.RuleName">
 <summary>
 Gets the name of the current rule.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ILowLevelSupport.Automation">
 <summary>
 Gets the Automation object. This provides the iLogic API functions.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ILowLevelSupport.DocumentUpdate">
 <summary>
 Updates the document that the rule is running in.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ILowLevelSupport.DocumentUpdate(System.Boolean)">
 <summary>
 Updates the document that the rule is running in.
 </summary>
 <param name="updateView">If this is true, the active view (if any) will be updated.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ILowLevelSupport.UpdateWhenDone">
 <summary>
 Gets or sets a property of the rule. If this is True, when the rule finishes it will perform an Update on the document in which it is running.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ILowLevelSupport.SetViewCamera(Autodesk.iLogic.Interfaces.ViewCameraOption,System.Double[],System.Double[],System.Double[],System.Double[])">
 <summary>
 Sets the direction, orientation, and scale of the camera in the current view.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ILowLevelSupport.RunMacro(System.String,System.String,System.String,System.Object[])">
 <summary>
 Runs a VBA macro.
 </summary>
 <param name="projectName">the VBA project name</param>
 <param name="componentName">the VBA component name </param>
 <param name="macroName">the VBA macro name</param>
 <param name="args">arguments for the macro</param>
 <returns>if the macro is a Function, this will be its return value</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ILowLevelSupport.RunRule(System.String)">
 <summary>
 Runs a rule in the current document.
 </summary>
 <param name="ruleName"></param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ILowLevelSupport.RunRule(System.Object,System.String)">
 <summary>
 Runs a rule in another component or document.
 </summary>
 <param name="componentOrDocName">The name of the component or document</param>
 <param name="ruleName">The name of the rule</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ILowLevelSupport.RunExternalRule(System.String)">
 <summary>
 Runs an external rule.
 </summary>
 <param name="ruleName">The filename of the rule. The extension can be omitted.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ILowLevelSupport.RunRule(System.String,Inventor.NameValueMap)">
 <summary>
 Runs a rule with the specified arguments.
 </summary>
 <param name="ruleName">the name of the rule</param>
 <param name="ruleArguments">a map containing argument names and values</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ILowLevelSupport.RunRule(System.Object,System.String,Inventor.NameValueMap)">
 <summary>
 Runs a rule with the specified arguments in another component or document.
 </summary>
 <param name="componentOrDocName">The name of the component or document.</param>
 <param name="ruleName">The name of the rule.</param>
 <param name="ruleArguments">A map containing argument names and values.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ILowLevelSupport.RunExternalRule(System.String,Inventor.NameValueMap)">
 <summary>
 Runs an external rule with the specified arguments.
 </summary>
 <param name="ruleName">The filename of the rule. The extension can be omitted.</param>
 <param name="ruleArguments">A map containing argument names and values.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ILowLevelSupport.CreateObjectProvider(Inventor.Document)">
 <summary>
 Creates a factory that can be used to access standard objects in another document.
 These objects provide the functionality of the standard predefined iLogic objects in rules.
 </summary>
 <param name="document">The document that the new standard objects will use as their base document.</param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IiLogicForm">
 <summary>
  Provides functions to show (launch) predefined iLogic forms.
  <para>
 In a rule, this interface is implemented by the predefined object named <c>iLogicForm</c>.
  </para>
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicForm.FormNames">
 <summary>
 Gets a list of the forms that are stored in this model.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicForm.GlobalFormNames">
 <summary>
 Gets a list of the forms that are stored globally.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IiLogicForm.EnablePositionAndSizeSaving">
 <summary>
 If this is True, and the size and position of the form are changed while it is being shown, they will be saved upon closing it.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicForm.Show(System.String,Autodesk.iLogic.Interfaces.FormMode)">
 <summary>
 Shows a form that is stored in the model.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IiLogicForm.ShowGlobal(System.String,Autodesk.iLogic.Interfaces.FormMode)">
 <summary>
 Shows a form that is in global storage.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.FormMode">
 <summary>
 A choice of form modes.  AsDesigned will use the mode specified in the form design.  Modal or NonModal will override it.
 </summary>
 <remarks></remarks>
</member>
<member name="F:Autodesk.iLogic.Interfaces.FormMode.AsDesigned">
 <summary>
 Use the mode (either Modal or NonModal) that is associated with the form.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.FormMode.Modal">
 <summary>
 When the form is shown, disable other UI.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.FormMode.NonModal">
 <summary>
 When the form is shown, enable other UI as well.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.FormResult">
 <summary>
 A return value of a form: usually indicates which button caused the form to be closed.
 </summary>
 <remarks>
 This is similar to System.Windows.Forms.DialogResult.
 See FormReturnValue for the full return value.
 </remarks>
</member>
<member name="F:Autodesk.iLogic.Interfaces.FormResult.None">
 <summary>
 The form was closed with the X button on the window frame, or the form is shown non-modally.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.FormResult.OK">
 <summary>
 The form was closed by clicking the OK button.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.FormResult.Cancel">
 <summary>
 The form was closed by clicking the Cancel button.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.FormResult.Close">
 <summary>
 The form was closed by clicking the Close button.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.FormResult.Done">
 <summary>
 The form was closed by clicking the Done button.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.FormResult.RuleButtonClose">
 <summary>
 The form was closed by clicking a rule button that has its "On Click Action" set to "Close and run rule".
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.FormResult.RuleButtonApplyAndClose">
 <summary>
 The form was closed by clicking a rule button that has its "On Click Action" set to "Apply and then close and then run rule".
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.FormReturnValue">
 <summary>
 The full form return value, including the FormResult.  If Result is RuleButtonClose or RuleButtonApplyAndClose, RuleName
 will contain the name of the rule that is associated with the rule button that caused the form to close.
 </summary>
 <remarks></remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.FormReturnValue.Result">
 <summary>
 Gets the form result enum.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.FormReturnValue.RuleName">
 <summary>
 Gets the rule that is associated with the rule button that caused the form to close.
 This will be valid only if the form was closed as the result of pressing a rule button.
 </summary>
 <returns></returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ICadDoc">
 <summary>
  Provides properties and functions for access to the Inventor document in which the rule is running.
  <para>
 In a rule, this interface is implemented by the predefined object named <c>ThisDoc</c>.
  </para>
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDoc.Path">
 <summary>
 Gets the path of the folder that stores the document in which the rule is running.
 </summary>
 <returns>The folder path</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDoc.FileName(System.Boolean)">
 <summary>
 Gets the filename of the file in which the rule is running.
 </summary>
 <param name="withExtension">If this is true, the file extension will be include in the name. The default is False.</param>
 <returns>The filename, with or without the extension.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDoc.PathAndFileName(System.Boolean)">
 <summary>
 Gets the complete path with filename of the document in which the rule is running.
 </summary>
 <param name="withExtension">If this is true, the file extension will be include in the name. The default is False.</param>
 <returns>The path with filename, with or without the extensin.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDoc.WorkspacePath">
 <summary>
 Gets the path of the workspace folder of the active project. This will be empty if no workspace is defined.
 </summary>
 <returns>The workspace folder path.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadDoc.ChangeExtension(System.String)">
 <summary>
 Returns a new filename with the same name as the document in which the rule is running, but with a different extension.
 </summary>
 <param name="extension">The new extension.</param>
 <returns>The new filename.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadDoc.Launch(System.String)">
 <summary>
 Launches or runs a file in the Windows operating system.  If a data file is specified, it opens in its native application. If an executable file (.exe) is specified, it runs the program.
 If an Inventor file is specified, the file will be opened in the current Inventor session.
 </summary>
 <param name="fileName">Absolute or relative path with filename.</param>
 <returns>The process created, or the current Inventor process.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDoc.Document">
 <summary>
 Gets the document in which the rule is running.
 </summary>
 <returns>The document (an Inventor API object).</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDoc.FactoryDocument">
 <summary>
 If the rule is running in a model state member document, this returns the corresponding factory document.
 Otherwise, in a part or assembly this returns the same object as the <see cref="P:Autodesk.iLogic.Interfaces.ICadDoc.Document"/> property.
 In a drawing, this returns Nothing.
 </summary>
 <returns>The document (an Inventor API object).</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDoc.ModelDocument">
 <summary>
 In a part or assembly, this will get the document in which the rule is running.
 In a drawing, this will get the document that is shown in the first view of a model that is found. If no such view is found, a value of Nothing will be returned.
 </summary>
 <returns>The document (an Inventor API object).</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDoc.Geometry">
 <summary>
 Gets an object that can be used to create points, vectors, and matrices that have values in the units of the document in which the rule is running.
 </summary>
 <returns>A geometry factory object.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadDoc.Save">
 <summary>
 Saves the document in which the rule is running.
 </summary>
 <remarks>
 If the rule is running on an event, it might not be possible to save the document.
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDoc.NamedEntities">
 <summary>
 Gets the named entities (faces, edges, and vertices) and the work features in a document.
 </summary>
 <returns>The named entities.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDoc.ActiveModelState">
 <summary>
 Gets and sets the active model state, in a part or assembly that has more than one model state.
 </summary>
 <returns>The name of the active model state.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ICadBom">
 <summary>
  Provides functions for access to the assembly BOM.
  <para>
 In a rule, this interface is implemented by the predefined object named <c>ThisBom</c>.
  </para>
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadBom.Export(System.String,System.String,Inventor.FileFormatEnum,System.String)">
 <summary>
 Exports a BOM view.
 </summary>
 <param name="viewName">The name of the BOM view. This can be "Structured" or "Parts Only".</param>
 <param name="fileName">The name of the file to be written. This can be a relative or absolute path.</param>
 <param name="fileFormat">The file format.</param>
 <param name="sheetName">If the format is Excel, this is the name of the sheet to write to.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadBom.OverrideQuantity(System.String,System.String,System.Int32)">
 <summary>
 Overrides a quantity of an item in the BOM.
 </summary>
 <param name="viewName">The name of the BOM view. This must be "Model Data"</param>
 <param name="partNumber">The part number of the component to override.</param>
 <param name="quantity">The quantity to assign to the item.</param>
 <remarks>This may not work if a custom model state is currently active.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadBom.CalculateQuantity(System.String,System.String)">
 <summary>
 Sets the BOM quantity back to the automatically calculated quantity. 
 </summary>
 <param name="viewName">The name of the BOM view. This must be "Model Data"</param>
 <param name="partNumber">The part number of the component to override.</param>
 <returns>The automatically calculated quantity.</returns>
 <remarks>This may not work if a custom model state is currently active.</remarks>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ViewCameraOption">
 <summary>
  Options for the ILowLevelSupport.SetViewCamera function.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.ViewCameraOption.SetExtents">
 <summary>
 Set the view extents to the specied values.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.ViewCameraOption.FitExtents">
 <summary>
 Fit the view to include all visible geometry.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.ViewCameraOption.NoChangeExtents">
 <summary>
 Don't change the extents of the view.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ICadDrawing">
 <summary>
  Provides functions for access to the drawing in which the rule is running.
  <para>
 In a rule, this interface is implemented by the predefined object named <c>ThisDrawing</c>.
  </para>
 </summary>
 <remarks>
 ActiveSheet will be available as a property of the rule class (so that it can be used as a standalone object), if used in the rule.
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawing.Sheet(System.String)">
 <summary>
 Gets the sheet with the specified name.
 An exception (error) will be thrown if the sheet is not found.
 </summary>
 <param name="sheetName">The sheet name.</param>
 <returns>A sheet object.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawing.ActiveSheet">
 <summary>
 Gets the active sheet.
 </summary>
 <returns>A sheet object.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawing.ResourceFileName">
 <summary>
 Gets or sets a path with filename that specifies the name of another drawing from which to pull title block and border definitions for the sheet TitleBlock and Border functions.
 This can be a relative or absolute path.
 </summary>
 <returns>The name of the resource file drawing file.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawing.KeepExtraResources">
 <summary>
 If this is set to False, then resources that have been copied from the drawing specified by ResourceFileName will be deleted from the current drawing
 when an iLogic function is used to replace them. This helps to redcue the number of unused resources stored in the drawing.
 The default value is True.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawing.Document">
 <summary>
 Gets the drawing document in which the rule is running.
 </summary>
 <returns>The DrawingDocument (an Inventor API object).</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawing.ModelDocument">
 <summary>
 Gets the document that is shown in the first view of a model that is found in the current drawing.
 If no such view is found, a value of Nothing will be returned.
 </summary>
 <returns>The document (an Inventor API object).</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawing.ModelFactoryDocument">
 <summary>
 If the document returned by the <see cref="P:Autodesk.iLogic.Interfaces.ICadDrawing.ModelDocument"/> is a model state member document,
 then this will get the corresponding factory document.
 </summary>
 <returns>The document (an Inventor API object).</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ICadDrawingSheet">
 <summary>
  Provides functions and properties for a drawing sheet.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadDrawingSheet.ChangeSize(System.String,System.Boolean)">
 <summary>
 Changes the size of the sheet to a different standard size.
 </summary>
 <param name="size">The name of a standard size. (e.g. "D" or "A3").</param>
 <param name="moveBorderItems">
 If this is True then an attempt will be made to move any items (tables etc.) that are placed along the border top or right.
 They will be moved along with the border.
 The default is True.
 </param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadDrawingSheet.ChangeSize(System.Double,System.Double,System.Boolean)">
 <summary>
 Changes the size of the drawing to a different custom size.
 </summary>
 <param name="customHeight">The height in drawing length units.</param>
 <param name="customWidth">The width in drawing length units.</param>
 <param name="moveBorderItems">
 If this is True then an attempt will be made to move any items (tables etc.) that are placed along the border top or right.
 They will be moved along with the border.
 The default is True.
 </param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingSheet.Name">
 <summary>
 Gets the name of the sheet.
 </summary>
 <returns>The name of the sheet.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingSheet.Size">
 <summary>
 Gets the size of the sheet (e.g. "D" or "A3"). 
 If the sheet has a custom size, this will be "Custom" (always in English, never translated).
 </summary>
 <returns>The sheet standard size or "Custom".</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingSheet.Height">
 <summary>
 Gets the height of the drawing.
 </summary>
 <returns>The height of the drawing, in drawing document units.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingSheet.Width">
 <summary>
 Gets the width of the drawing.
 </summary>
 <returns>The width of the drawing, in drawing document units.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingSheet.Sheet">
 <summary>
 Gets the Inventor API Sheet object for this sheet.
 </summary>
 <returns>An object of type Inventor.Sheet.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingSheet.TitleBlock">
 <summary>
 Gets or sets the name of the drawing resource that is used to create the title block for the sheet.
 When this value is set, the name must be found in the drawing resources of the current drawing, or in the ResourceFileName drawing (if it is specified).
 </summary>
 <value>The name of the title block resource.</value>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingSheet.Border">
 <summary>
 Gets or sets the name of the drawing resource that is used to create the border for the sheet.
 When this value is set, the name must be found in the drawing resources of the current drawing, or in the ResourceFileName drawing (if it is specified).
 </summary>
 <value>The name of the title block resource.</value>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadDrawingSheet.SetTitleBlock(System.String,System.String[])">
 <summary>
 Sets the name of the drawing resource that is used to create the title block for the sheet.
 In addition, provide values for the prompted entries (text) required by the title block.
 </summary>
 <param name="titleBlockName">The name of the title block resource.</param>
 <param name="promptedEntries">A list of values for the prompted entries.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadDrawingSheet.SetBorder(System.String,System.String[])">
 <summary>
 Sets the name of the drawing resource that is used to create the border for the sheet.
 In addition, provide values for the prompted entries (text) required by the title block.
 </summary>
 <param name="borderName">The name of the border resource.</param>
 <param name="promptedEntries">A list of values for the prompted entries.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingSheet.View(System.String)">
 <summary>
 Gets the drawing view with the specified name on this sheet.
 If no view with the name is found, and exception (error) will be thrown.
 </summary>
 <param name="viewName">The view name.</param>
 <returns>The view that was found.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ICadDrawingView">
 <summary>
  Provides functions and properties that operate on a drawing view.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadDrawingView.SetCenter(System.Double,System.Double)">
 <summary>
 Sets the position of the center of the view on the sheet.
 </summary>
 <param name="centerX">The X value of the center point, in drawing document length units.</param>
 <param name="centerY">The Y value of the center point, in drawing document length units.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadDrawingView.SetSpacingToCorner(System.Double,System.Double,Autodesk.iLogic.Interfaces.SheetCorner)">
 <summary>
 Sets the view location by specifying the distance between a corner of the view and the corresponding corner of the sheet.
 </summary>
 <param name="distanceX">The distance between corners in the X direction, in drawing document units.</param>
 <param name="distanceY">The distance between corners in the Y direction, in drawing document units.</param>
 <param name="corner">Specify the corner.</param>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingView.SpacingBetween(Autodesk.iLogic.Interfaces.ICadDrawingView)">
 <summary>
 Gets or sets the view location by specifying the distance to another view.
 The other view is typically adjacent on the sheet. The spacing is between view edges, in the X or Y direction.
 The system chooses the direction by looking at the current spacing between the view positions (not the edges). The axis used is the direction of greatest separation.
 Specify a positive spacing value to place this view to the right or above the other view.
 Specify a negative value to place this view to the left or below the other view.
 </summary>
 <param name="otherView">The other view.</param>
 <returns>The spacing between view edges (boundaries).</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingView.SpacingBetween(System.String)">
 <summary>
 Gets or sets the view location by specifying the distance to another view.
 The other view is typically adjacent on the sheet. The spacing is between view edges, in the X or Y direction.
 The system chooses the direction by looking at the current spacing between the view positions (not the edges). The axis used is the direction of greatest separation.
 Specify a positive spacing value to place this view to the right or above the other view.
 Specify a negative value to place this view to the left or below the other view.
 </summary>
 <param name="otherViewName">The name of the other view.</param>
 <returns>The spacing between view edges (boundaries).</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingView.Center">
 <summary>
 Gets and sets the view center point in drawing document length units.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingView.Name">
 <summary>
 Gets the name of the view.
 </summary>
 <returns>The view name.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingView.Height">
 <summary>
 Gets the height of the view.
 (The height of a model view is determined by the projected height of the model and the view scale.)
 </summary>
 <returns>The height of the view in drawing document units.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingView.Width">
 <summary>
 Gets the width of the view.
 (The width of a model view is determined by the projected width of the model and the view scale.)
 </summary>
 <returns>The width of the view in drawing document units.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingView.Scale">
 <summary>
 Gets or sets the view scale, as a number.
 </summary>
 <returns>The view scale.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingView.ScaleString">
 <summary>
 Gets or sets the view scale as a text string (e.g. "1:1").
 </summary>
 <returns>The view scale.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingView.ModelDocument">
 <summary>
 Gets the model document (part or assembly) shown in this view. If the view is not a model view, this will be Nothing.
 </summary>
 <returns>The model document.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingView.ModelFactoryDocument">
 <summary>
 If the document returned by the <see cref="P:Autodesk.iLogic.Interfaces.ICadDrawingView.ModelDocument"/> is a model state member document,
 then this will get the corresponding factory document.
 </summary>
 <returns>The document (an Inventor API object).</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingView.Balloons">
 <summary>
 Gets an object that can be used to access the balloons associated with this view.
 </summary>
 <returns>A balloons object.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.ICadDrawingView.View">
 <summary>
 Gets the Inventor API DrawingView object for this view.
 </summary>
 <returns>A view object (of the type Inventor.DrawingView).</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.SheetCorner">
 <summary>
 Options for placing a view relative to the corner of the drawing sheet.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.SheetCorner.Automatic">
 <summary>
 Use the sheet corner that is currently closest to the corresponding view corner.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.SheetCorner.TopLeft">
 <summary>
 Use the top left corner.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.SheetCorner.TopRight">
 <summary>
 Use the top right corner.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.SheetCorner.BottomLeft">
 <summary>
 Use the bottom left corner.
 </summary>
</member>
<member name="F:Autodesk.iLogic.Interfaces.SheetCorner.BottomRight">
 <summary>
 Use the bottom right corner.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.ICadViewBalloons">
 <summary>
  Provides functions and properties for balloons in a drawing view.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadViewBalloons.Reattach">
 <summary>
 Reattaches the balloons to their corresponding components after the components have moved.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadViewBalloons.DoNotAttachToComponent(System.String)">
 <summary>
 This can be used to specify a component that you don't want the Reattach function to attach a balloon to.
 </summary>
 <param name="componentName">The component name, as it appears in the assembly model browser.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.ICadViewBalloons.AttachToComponent(System.String)">
 <summary>
 This can be used to explicitly specify a component that want the Reattach function to attach a balloon to.
 If you specify one component, you have to specify all that you want to attach to.
 </summary>
 <param name="componentName">The component name, as it appears in the assembly model browser.</param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IRuleArguments">
 <summary>
 Provides access to context information provided via the RunRule family of automation methods.
 <para>
 In a rule, this interface is implemented by the predefined object named <c>RuleArguments</c>.
 </para>
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IRuleArguments.Value(System.String)">
 <summary>
 Gets the value of a rule argument.
 </summary>
 <param name="name">The name of the argument.</param>
 <returns>The value of the argument. An exception (error) will be thrown if an argument by that name does not exist.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IRuleArguments.Exists(System.String)">
 <summary>
 Determines whether the specified argument was provided to this rule.
 </summary>
 <param name="name">The name of the argument.</param>
 <returns>True if the argument exists.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IRuleArguments.Arguments">
 <summary>
 Gets the complete list of arguments.
 </summary>
 <returns>The list of arguments.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedComponents">
 <summary>
 Provides functions for adding, modifying, and deleting assembly components.
 <para>
 In a rule, this interface is implemented by the predefined object named <c>Components</c>
 (which is the same object as <c>ThisAssembly.Components</c>).
 </para>
 </summary>
 <remarks>
 <para>
 Components can be managed using <see cref="M:Autodesk.iLogic.Interfaces.IManagedAssembly.BeginManage(System.String)"/> and <see cref="M:Autodesk.iLogic.Interfaces.IManagedAssembly.EndManage(System.String)"/>.
 </para>
 <para>
 The <c>Add</c> and <c>AddiPart</c> methods require a filename argument. It can be a simple filename, or an absolute or relative path.
 The system will search for a simple filename or relative path in the active project:
 <list type="bullet">
   <item>workspace</item> 
   <item>workgroup search paths (if any)</item> 
   <item>libraries (if any)</item> 
 </list>
 If the Using Unique File Names option is set in the active project, 
 the system will throw an error if two or more files are found with the specified name.
 </para>
 </remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedComponents.Add(System.String,System.String,Autodesk.iLogic.Types.PointOrMatrix,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Autodesk.iLogic.Types.StringOrAsset)">
 <summary>
 Adds a component occurrence to an assembly, or modifies an existing component.
 </summary>
 <param name="occName">Component occurrence name.</param>
 <param name="file">The name of the part or assembly file to be added. This can be an absolute or relative path, or just a filename.</param>
 <param name="position">Position and orientation of the occurrence (specified as a DocumentUnitsPoint or DocumentUnitsMatrix).</param>
 <param name="grounded">Occurrence groundedness. Default is false.</param>
 <param name="visible">Occurrence visibility. Default is true.</param>
 <param name="appearance">Occurrence appearance. Default is As Material.</param>
 <returns>The component occurrence.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedComponents.AddWithModelState(System.String,System.String,System.String,Autodesk.iLogic.Types.PointOrMatrix,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Autodesk.iLogic.Types.StringOrAsset)">
 <summary>
 Adds a component occurrence with a specific model state to an assembly, or modifies an existing component to match
 the specified arguments.
 </summary>
 <param name="occName">Component occurrence name.</param>
 <param name="file">The name of the part or assembly file to be added. This can be an absolute or relative path, or just a filename.</param>
 <param name="modelStateName">The name of the model state.</param>
 <param name="position">Position and orientation of the occurrence (specified as a DocumentUnitsPoint or DocumentUnitsMatrix).</param>
 <param name="grounded">Occurrence groundedness. Default is false.</param>
 <param name="visible">Occurrence visibility. Default is true.</param>
 <param name="appearance">Occurrence appearance. Default is As Material.</param>
 <returns>The component occurrence.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedComponents.AddiPart(System.String,System.String,System.Int32,Autodesk.iLogic.Types.PointOrMatrix,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Autodesk.iLogic.Types.StringOrAsset)">
 <summary>
 Adds an iPart to an assembly, or modifies an existing iPart occurrence.
 </summary>
 <param name="occName">Component occurrence name.</param>
 <param name="factoryFile">The absolute or relative path to an iPart factory file.</param>
 <param name="row">The row number in the iPart factory table. The first row is 1.</param>
 <param name="position">Position and orientation of the occurrence (specified as a DocumentUnitsPoint or DocumentUnitsMatrix).</param>
 <param name="grounded">Occurrence groundedness. Default is false.</param>
 <param name="visible">Occurrence visibility. Default is true.</param>
 <param name="appearance">Occurrence appearance. Default is As Material.</param>
 <returns>The component occurrence.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedComponents.AddiPart(System.String,System.String,System.Object[],Autodesk.iLogic.Types.PointOrMatrix,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Autodesk.iLogic.Types.StringOrAsset)">
 <summary>
 Adds an iPart to an assembly, or modifies an existing iPart occurrence.
 </summary>
 <param name="occName">Component occurrence name.</param>
 <param name="factoryFile">The absolute or relative path to an iPart factory file.</param>
 <param name="findRow">Array of strings to find a row in the iPart table.
 This is similar to the <c>iPart.FindRow</c> function, but with no "=" or other operators.
 Only name, value pairs can be specified (e.g. {"Dia", 20, "Height", 100}). The equals operator is implied.
 </param>
 <param name="position">Position and orientation of the occurrence (specified as a DocumentUnitsPoint or DocumentUnitsMatrix).</param>
 <param name="grounded">Occurrence groundedness. Default is false.</param>
 <param name="visible">Occurrence visibility. Default is true.</param>
 <param name="appearance">Occurrence appearance. Default is As Material.</param>
 <returns>The component occurrence.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedComponents.AddContentCenterPart(System.String,System.String,System.String,System.String,Autodesk.iLogic.Types.PointOrMatrix,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Autodesk.iLogic.Types.StringOrAsset)">
 <summary>
 Adds a standard Content Center part to an assembly. The part is specified with a category path, a family name, and a Designation string.
 </summary>
 <param name="occName">Component occurrence name.</param>
 <param name="ccPath">Category path in the Content Center tree view.</param>
 <param name="familyName">Content center family name.</param>
 <param name="designation">The Designation value. 
 This is the cell value found in the column that has the internal name "DESIGNATION". 
 (You can see the internal name in the table by hovering over the column header.)</param>
 <param name="position">Position and orientation of the occurrence (specified as a DocumentUnitsPoint or DocumentUnitsMatrix).</param>
 <param name="grounded">Occurrence groundedness. Default is false.</param>
 <param name="visible">Occurrence visibility. Default is true.</param>
 <param name="appearance">Occurrence appearance. Default is As Material.</param>
 <returns>The component occurrence.</returns>
 <remarks>Only standard Content Center parts are supported.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedComponents.AddContentCenterPart(System.String,System.String,System.String,System.Object[],Autodesk.iLogic.Types.PointOrMatrix,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Autodesk.iLogic.Types.StringOrAsset)">
 <summary>
 Adds a standard Content Center part to an assembly. The part is specified with a family path and a list of column names and values.
 </summary>
 <param name="occName">Component occurrence name.</param>
 <param name="ccPath">Category path in the Content Center tree view.</param>
 <param name="familyName">Content center family name.</param>
 <param name="findRow">Array of name, value pairs to select a row in the table. The names are column names (without units). 
 The values can be strings or numbers.
 (e.g. <c>{"Nominal Length", 45, "SIZE_SEL", "M6"}</c>)
 <para>The column names can be either display or internal names. Sometimes there are two or more columns with the same
 display name. In that case, use the internal name. 
 (You can see the internal name in the table by hovering over the column header.)
 </para>
 </param>
 <param name="position">Position and orientation of the occurrence (specified as a DocumentUnitsPoint or DocumentUnitsMatrix).</param>
 <param name="grounded">Occurrence groundedness. Default is false.</param>
 <param name="visible">Occurrence visibility. Default is true.</param>
 <param name="appearance">Occurrence appearance. Default is As Material.</param>
 <returns>The component occurrence.</returns>
 <remarks>Only standard Content Center parts are supported.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedComponents.Delete(System.String)">
 <summary>
 Deletes a component occurrence from an assembly.
 </summary>
 <param name="occName">Component occurrence name.</param>
 <remarks>This function is not needed if you are using <see cref="M:Autodesk.iLogic.Interfaces.IManagedAssembly.BeginManage(System.String)"/>. 
 Begin/End manage will automatically delete unreferenced components.
 <para>There is no error if the occurrence is not found.</para>
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedComponents.Item(Autodesk.iLogic.Types.ComponentArgument)">
 <summary>
 Gets a component occurrence with the given name.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedComponents.Count">
 <summary>
 Gets the total count of component occurrences (either managed or unmanaged) in the assembly.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedComponents.ContentCenterLanguage">
 <summary>
 Gets and sets the name of the language to be used in searches for Content Center parts.
 Acceptable values: "en-US" "zh-CN" "zh-TW" "cs-CZ" "de-DE" "fr-FR" "es-ES" "it-IT" "ja-JP" "ko-KR" "pl-PL" "pt-BR" "ru-RU" "hu-HU"
 </summary>
 <remarks>
 It's usually not necessary to set this explicitly in a rule that is stored within a document.
 When you create a rule, the current language is stored (one time only) in the document. That language is then used as the default
 for all rules in the document.
 But in an external rule, this property should be set explicitly. 
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedComponents.TableSearchTolerance">
 <summary>
 Gets and sets a value to be used in searches for numeric values in iPart and Content Center tables.
 If the difference between two numbers is less than or equal to the tolerance, they will be considered to be equal.
 Default: 0.00001
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedAssembly">
 <summary>
 Provides functions for managing components, patterns, and constraints in the assembly in which the rule is running.
 <para>
 In a rule, this interface is implemented by the predefined object named <c>ThisAssembly</c>.
 </para>
 </summary>
 <remarks>
 <para>
 The <c>BeginManage</c>/<c>EndManage</c>
 pair of functions provides for automatic deletion of unused components, patterns, and constraints. Those are known as managed items.
 </para>
 <para>
 The Components, Patterns, and Constraints objects provide <c>Add*</c> functions. Each of these functions operates on an item.
 Within a BeginManage/EndManage block, you must call Add* for every desired item, even if it already exists. The Add* call 
 might create the item, modify it, or leave it unchanged.
 When EndManage is called, any items that were managed (within the current BeginManage/EndManage block),
 in a previous run but which were not "touched" (by an Add* call) this time are deleted. This allows for code that ensures the existence of items under
 certain conditions, without requiring any statements to explicitly delete the items when those conditions are not met.
 </para>
 <para>
 So within a BeginManage/EndManage block, you only have to write the <c>Add*</c> functions. 
 iLogic automatically takes care of the deletions.
 </para>
 <para>
 Within a BeginManage/EndManage block, an <c>Add*</c> function can only be called once for a given item name.
 </para>
 <para>
 BeginManage/EndManage blocks cannot be nested.
 </para>
 <para>
 Note: the <c>Add*</c> functions can also be used in unmanaged mode. 
 Any code that is outside of a BeginManage/EndManage block will run in unmanaged mode.
 In unmanaged mode, you can add and modify items. If there are conditions in which some of the items need to be deleted,
 you have to make the explicit calls to a <c>Delete</c> function.
 </para>
 <para>
 When an Add* function is used and an item name is specified:
 </para>
 <list type="bullet"> 
   <item>If an item with that name does not already exist, iLogic will create it and use the supplied name.</item> 
   <item>If an item with that name already exists, iLogic will modify it (if necessary) to fit the new specification.</item> 
 </list> 
 <para>
 For components and constraints (but not patterns), the <c>Add*</c> functions will accept a blank string for the item name.
 This can be used to add an item with a system-generated default name.
 (But it's hard to find and modify an item like that later.)
 </para>
 <para>
 There is an <c>AssetNameLanguage</c> rule property to support appearance asset names in different languages. 
 It affects the <c>GetAppearanceAsset</c> functions.
 In a rule that is stored in a document, <c>AssetNameLanguage</c> usually doesn't have to be set explicitly.
 When a rule is created, the system will store the current language in a document attribute (one time only).
 That language is then used as the default for all rules in the document.
 But in an external rule, this property should be set explicitly. 
 Acceptable values of the <c>AssetNameLanguage</c> property are:
 "chs", "cht", "csy", "deu", "eng", "esp", "fra", "hun", "ita", "jpn", "kor", "plk", "ptb", or "rus".
 </para>
 <para>
 Sample code:
 <code>
 AssetNameLanguage = "fra"
 Dim assetV = ThisAssembly.GetAppearanceAsset("Vert poli")
 </code>
 </para>
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedAssembly.Document">
 <summary>
 Gets the AssemblyDocument that is being managed. This will usually be the document that contains the rule.
 For external rules, it will be the document in which the rule is running.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedAssembly.Components">
 <summary>
 Gets an object that can be used to add, modify, and delete components.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedAssembly.Constraints">
 <summary>
 Gets an object that can be used to add, modify, and delete constraints.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedAssembly.Patterns">
 <summary>
 Gets an object that can be used to add, modify, and delete component patterns.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedAssembly.Geometry">
 <summary>
 Gets an object that can be used to create points, vectors, and matrices that have values in the units of the assembly in which the rule is running.
 </summary>
 <returns>A geometry factory object.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedAssembly.ImmediateConstraints">
 <summary>
 During rule execution, assembly update is deferred by default. Set this property to True to turn off this behavior.
 If this is set to True, the assembly is updated immediately after each constraint change.
 </summary>
 <value>The current value of the property.</value>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedAssembly.BeginManage(System.String)">
 <summary>
 Puts the system in a "managed group" state.
 The BeginManage/EndManage pair of functions provides for automatic deletion of unused components.
 </summary>
 <param name="groupName">Name of the group. iLogic manages occurrences on a per-group basis.
 In a rule that is stored in an assembly document, the name can be empty. The group with an empty
 name is the default group for the rule.
 In an external rule, the name cannot be empty.
 </param>
 <remarks>
 <c>BeginManage</c>/<c>EndManage</c> blocks cannot be nested.
 </remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedAssembly.EndManage(System.String)">
 <summary>
 Takes the system out of a "managed group" state.
 Any items (components, patterns, and constraints) that were previously managed by this group, 
 but have not been touched in the current run will be deleted.
 (The current run includes all the statements between the preceding <c>BeginManage</c> and this <c>EndManage</c> statement.)
 </summary>
 <param name="groupName">Name of the group. This name must match the name in the corresponding BeginManage statement.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedAssembly.GetAppearanceAsset(System.String)">
 <summary>
 Gets an appearance asset from the document.
 An error will occur if the appearance is not found.
 </summary>
 <param name="assetName">The asset name.</param>
 <remarks>
 For portability of code with asset names in different languages, the <c>AssetNameLanguge</c>
 rule property is available. See the remarks section in <see cref="T:Autodesk.iLogic.Interfaces.IManagedAssembly"/>.
 </remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedAssembly.GetAppearanceAsset(System.String,System.String)">
 <summary>
 Gets an appearance asset from the document. If that fails it gets the appearance asset from a library and copies it to the document.
 An error will occur if the appearance is not found.
 </summary>
 <param name="assetName">The asset name.</param>
 <param name="libraryName">The name of the asset library (e.g. "Inventor Material Library").</param>
 <remarks>
 <para>
 For portability of code with asset names in different languages, the <c>AssetNameLanguge</c>
 rule property is available. See the remarks section in <see cref="T:Autodesk.iLogic.Interfaces.IManagedAssembly"/>.
 </para>
 <para>
 It's best to use English names for the standard libraries. The <c>AssetNameLanguge</c>
 property does not affect the search for libraries.
 The available libraries are:
 <list type="bullet">
   <item>"Autodesk Appearance Library"</item> 
   <item>"Autodesk Material Library"</item> 
   <item>"Inventor Material Library"</item> 
 </list>
 </para>
 </remarks>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IGeometry">
 <summary>
 Provides factory methods to create temporary points, vectors, and matrices in document units.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Point(System.Double,System.Double,System.Double)">
 <summary>
 Creates and returns a new 3D DocumentUnitsPoint with the given coordinate values.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Point(System.String)">
 <summary>
 Creates and returns a new 3D DocumentUnitsPoint with the coordinates of a work point or named vertex.
 </summary>
 <param name="entityName">The name of the work point or the named vertex.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Point(Autodesk.iLogic.Types.ComponentArgument,System.String)">
 <summary>
 Creates and returns a new 3D DocumentUnitsPoint with the coordinates of the work point or named vertex in a component.
 </summary>
 <param name="component">The name (or path) of the component occurrence.</param>
 <param name="entityName">The name of the work point or the named vertex.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Vector(System.Double,System.Double,System.Double)">
 <summary>
 Creates and returns a new 3D DocumentUnitsVector with the given coordinate values.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Matrix">
 <summary>
 Creates and returns a new 4x4 DocumentUnitsMatrix. The matrix is initialized as an identity matrix.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Matrix(System.Double[])">
 <summary>
 Creates and returns a new 4x4 DocumentUnitsMatrix. The elements of the matrix are initialized from a double array of size 16.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Matrix(System.String)">
 <summary>
 Creates and returns a new 4x4 DocumentUnitsMatrix. The matrix is initialized with a matrix from a User Coordinate System (UCS).
 </summary>
 <param name="ucsName">The name of the UCS.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Matrix(Autodesk.iLogic.Types.ComponentArgument,System.String)">
 <summary>
 Creates and returns a new 4x4 DocumentUnitsMatrix. The matrix is initialized with a UCS matrix from a component.
 </summary>
 <param name="component">The name (or path) of the component occurrence.</param>
 <param name="ucsName">The name of the UCS.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Matrix(Autodesk.iLogic.Types.DocumentUnitsPoint,Autodesk.iLogic.Types.DocumentUnitsVector,Autodesk.iLogic.Types.DocumentUnitsVector)">
 <summary>
 Creates and returns a new 4x4 DocumentUnitsMatrix. The matrix is initialized with origin point and two vectors.
 </summary>
 <param name="originPt">Input Point object that defines the origin of the coordinate system.</param>
 <param name="xDirection">Input Vector object that defines the X-axis vector of the coordinate system.</param>
 <param name="yDirection">Input Vector object that defines the Y-axis vector of the coordinate system.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Matrix(Autodesk.iLogic.Types.DocumentUnitsPoint,Autodesk.iLogic.Types.DocumentUnitsVector,Autodesk.iLogic.Types.DocumentUnitsVector,System.Double)">
 <summary>
 Creates and returns a new 4x4 DocumentUnitsMatrix. 
 The matrix is initialized with the origin point, and X and Z axis vectors. 
 It is rotated counterclockwise around the Z axis by the specified angle.
 </summary>
 <param name="originPt">Input Point object that defines the origin of the coordinate system.</param>
 <param name="xDirection">Input Vector object that defines the X-axis vector of the coordinate system.</param>
 <param name="zDirection">Input Vector object that defines the Z-axis vector of the coordinate system.</param>
 <param name="rotationAngle">Input Double that specifies the angle of rotation counterclockwise around the Z axis (in document angular units).</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Point2d(System.Double,System.Double)">
 <summary>
 Creates and returns a new 2D DocumentUnitsPoint2d with the given coordinate values.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Point2dList(System.Double[0:,0:])">
 <summary>
 Creates and returns a new list of DocumentUnitsPoint2d with the given coordinate values.
 </summary>
 <param name="points">2D array of numbers e.g. {{0,0}, {1,1}}</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IGeometry.Vector2d(System.Double,System.Double)">
 <summary>
 Creates and returns a new 2D DocumentUnitsVector2d with the given coordinate values.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedConstraint">
 <summary>
 Provides properties for a managed assembly constraint.
 </summary>
 <remarks>
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedConstraint.Constraint">
 <summary>
 Gets the underlying Inventor API constraint object.
 (If this returns Nothing, then this constraint is actually an iMateResult. Use the iMateResult property to get that object.)
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedConstraint.iMateResult">
 <summary>
 Gets the underlying Inventor API iMateResult object.
 (If this return Nothing, then this constraint is a simple Constraint. Use the Constraint property to get that object.)
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedConstraint.IsActive">
 <summary>
 Gets or sets a value that will be True if the constraint is unsuppressed, and False if it is suppressed.
 </summary>
 <returns></returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedPatterns">
 <summary>
 Provides functions to add, modify, and delete patterns of component occurrences.
 <para>
 In a rule, this interface is implemented by the predefined object named <c>Patterns</c>
 (which is the same object as <c>ThisAssembly.Patterns</c>).
 </para>
 </summary>
 <remarks>
 <para>
 Patterns can be managed using <see cref="M:Autodesk.iLogic.Interfaces.IManagedAssembly.BeginManage(System.String)"/> and <see cref="M:Autodesk.iLogic.Interfaces.IManagedAssembly.EndManage(System.String)"/>.
 </para>
 <para>
 If you use Capture Current State to create code to add a pattern, it's best to rename the pattern beforehand.
 If you keep the default name, your rules may not work on a system that is using a different language pack.
 </para>
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedPatterns.Item(System.String)">
 <summary>
 Gets an occurrence pattern with the given name.
 </summary>
 <param name="patternName">The pattern name.</param>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedPatterns.Delete(System.String)">
 <summary>
 Deletes an occurrence pattern from an assembly.
 </summary>
 <param name="patternName">The pattern name.</param>
 <remarks>There is no error if the pattern is not found.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedPatterns.AddCircular(System.String,Autodesk.iLogic.Types.ComponentOrPattern,System.Int32,System.Double,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Boolean,System.Boolean)">
 <summary>
 Adds or modifies a circular pattern in an assembly.
 </summary>
 <param name="patternName">The pattern name.</param>
 <param name="parentComponents">The component (or components) to pattern.</param>
 <param name="count">Number of pattern elements wanted.</param>
 <param name="angleOffset">Angular spread between the elements.</param>
 <param name="axisComponent">The part or assembly which owns the axis.</param>
 <param name="axisEntityName">Name of a work-axis or named linear edge.</param>
 <param name="axisNaturalDirection">True by default. Specify False to reverse the axis direction.</param>
 <param name="lockRotation">False by default. True means the patterned elements keep the same rotation as their parent occurrences.</param>
 <returns>The pattern.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedPatterns.AddRectangular(System.String,Autodesk.iLogic.Types.ComponentOrPattern,System.Int32,System.Double,Autodesk.iLogic.Types.ComponentArgument,System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Double},Autodesk.iLogic.Types.ComponentArgument,System.String,System.Boolean)">
 <summary>
 Adds or modifies a rectangular pattern in an assembly.
 </summary>
 <param name="patternName">The pattern name.</param>
 <param name="parentComponents">The component (or components) to pattern.</param>
 <param name="columnCount">Number of columns wanted.</param>
 <param name="columnOffset">Distance between the columns.</param>
 <param name="columnComponent">The part or assembly which owns the entity that defines the column (x) direction.</param>
 <param name="columnEntityName">Name of a work axis or named linear edge that defines the column (x) direction.</param>
 <param name="columnNaturalDirection">True by default. Specify False to make the column run in the opposite direction to the column entity.</param>
 <param name="rowCount">Number of rows wanted.</param>
 <param name="rowOffset">Distance between the rows.</param>
 <param name="rowComponent">The part or assembly which owns the entity that defines the row (y) direction.</param>
 <param name="rowEntityName">Name of a work axis or named linear edge that defines the row (y) direction.</param>
 <param name="rowNaturalDirection">True by default. Specify False to make the row run in the opposite direction to the row entity.</param>
 <returns>The pattern.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedPatterns.AddFeatureBased(System.String,Autodesk.iLogic.Types.ComponentOrPattern,Autodesk.iLogic.Types.ComponentArgument,System.String)">
 <summary>
 Adds or modifies a feature-based pattern in an assembly.
 </summary>
 <param name="patternName">The pattern name.</param>
 <param name="parentComponents">The component (or components) to pattern.</param>
 <param name="featurePatternComponent">The component that contains the base pattern feature.</param>
 <param name="featurePatternName">The name of the base pattern feature.</param>
 <returns>The pattern.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IRuleLogger">
 <summary>
 Provides a logger that can be used in iLogic rules.
 <para>
 In a rule, this interface is implemented by the predefined object named <c>Logger</c>.
 </para>
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IRuleLogger.Debug(System.String,System.Object[])">
 <summary>
 Logs a message at the Debug level.
 </summary>
 <param name="message">The message. It can contain String.Format-style placeholders ({0}, {1} etc.)</param>
 <param name="args">Arguments to replace the placeholders, if any.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IRuleLogger.Error(System.String,System.Object[])">
 <summary>
 Logs a message at the Error level.
 </summary>
 <param name="message">The message. It can contain String.Format-style placeholders ({0}, {1} etc.)</param>
 <param name="args">Arguments to replace the placeholders, if any.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IRuleLogger.Fatal(System.String,System.Object[])">
 <summary>
 Logs a message at the Fatal level.
 </summary>
 <param name="message">The message. It can contain String.Format-style placeholders ({0}, {1} etc.)</param>
 <param name="args">Arguments to replace the placeholders, if any.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IRuleLogger.Info(System.String,System.Object[])">
 <summary>
 Logs a message at the Info level (a message for information only).
 </summary>
 <param name="message">The message. It can contain String.Format-style placeholders ({0}, {1} etc.)</param>
 <param name="args">Arguments to replace the placeholders, if any.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IRuleLogger.Warn(System.String,System.Object[])">
 <summary>
 Logs a message at the Warn level (a warning message).
 </summary>
 <param name="message">The message. It can contain String.Format-style placeholders ({0}, {1} etc.)</param>
 <param name="args">Arguments to replace the placeholders, if any.</param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IRuleLogger.Trace(System.String,System.Object[])">
 <summary>
 Logs a message at the Trace level.
 </summary>
 <param name="message">The message. It can contain String.Format-style placeholders ({0}, {1} etc.)</param>
 <param name="args">Arguments to replace the placeholders, if any.</param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedDrawing">
 <summary>
 Provides functions for managing dimensions and annotations in the drawing in which the rule is running.
 In a rule, this interface is implemented by the predefined object named <c>ThisDrawing</c>.
 For backward compatibility, this interface inherits from <see cref="T:Autodesk.iLogic.Interfaces.ICadDrawing"/>.
 </summary>
 <remarks>
 Sample iLogic code:
 <code source=".\Samples\ManagedDrawingTwoViews.iLogicVb"  language="vbnet"/>
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedDrawing.Sheets">
 <summary>
 Gets the collection of sheets in the drawing.
 Each sheet is of the type <see cref="T:Autodesk.iLogic.Interfaces.IManagedSheet"/>.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedDrawing.Sheet(System.String)">
 <summary>
 Gets the sheet with the specified name.
 An exception (error) will be thrown if the sheet is not found.
 This is an older ICadDrawing property. In new code, use the Sheets property.
 </summary>
 <param name="sheetName">The sheet name.</param>
 <returns>A sheet object.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedDrawing.ActiveSheet">
 <summary>
 Gets the active sheet.
 </summary>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawing.BeginManage(System.String)">
 <summary>
 Puts the system in a "managed group" state.
 The BeginManage/EndManage pair of functions provides for automatic deletion of unused components.
 </summary>
 <param name="groupName">Name of the group. iLogic manages occurrences on a per-group basis.
 In a rule that is stored in an assembly document, the name can be empty. The group with an empty
 name is the default group for the rule.
 In an external rule, the name cannot be empty.
 </param>
 <remarks>
 <c>BeginManage</c>/<c>EndManage</c> blocks cannot be nested.
 For more details, see the remarks under <see cref="T:Autodesk.iLogic.Interfaces.IManagedAssembly"/>
 </remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawing.EndManage(System.String)">
 <summary>
 Takes the system out of a "managed group" state.
 Any items (components, patterns, and constraints) that were previously managed by this group, 
 but have not been touched in the current run will be deleted.
 (The current run includes all the statements between the preceding <c>BeginManage</c> and this <c>EndManage</c> statement.)
 </summary>
 <param name="groupName">Name of the group. This name must match the name in the corresponding BeginManage statement.</param>
 <remarks>
 <c>BeginManage</c>/<c>EndManage</c> blocks cannot be nested.
 For more details, see the remarks under <see cref="T:Autodesk.iLogic.Interfaces.IManagedAssembly"/>
 </remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawing.AddManagedEntity(System.String,System.Func{System.Object})">
 <summary>
 Adds a generic managed entity (e.g. an annotation) created by the Inventor API.
 </summary>
 <param name="entityName">The name of the entity.</param>
 <param name="factoryFunction">A function that will create the entity.</param>
 <returns>A managed entity.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawing.AddManagedEntity(System.String,System.Func{System.Object,System.Boolean},System.Func{System.Object})">
 <summary>
 Adds or edits a generic managed entity (e.g. an annotation) created by the Inventor API.
 </summary>
 <param name="entityName">The name of the entity.</param>
 <param name="editFunction">A function that will edit the entity, or check to see if it requires editing.
 This should return True if the entity has been edited satisfactorily, and can be kept.
 If the entity needs to be modified but the API doesn't allow the required edits, then this should return False.
 If this returns False, then the factory function will be called to create a new entity.
 </param>
 <param name="factoryFunction">A function that will create the entity.</param>
 <returns>A managed entity.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawing.AddManagedEntity(System.String,System.Object)">
 <summary>
 Registers a generic managed entity that has already been created or edited.
 </summary>
 <param name="entityName">The name of the entity.</param>
 <param name="entity">A drawing object created with an Inventor API function.</param>
 <returns>A managed entity.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawing.DeleteManagedEntity(System.String)">
 <summary>
 Deletes a generic managed entity.
 </summary>
 <param name="entityName">The name of the entity to delete.</param>
 <remarks>This function is not needed if you are using <see cref="M:Autodesk.iLogic.Interfaces.IManagedAssembly.BeginManage(System.String)"/>. 
 Begin/End manage will automatically delete unreferenced entities.
 <para>There is no error if the entity is not found.</para>
 </remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedDrawing.Geometry">
 <summary>
 Gets an object that can be used to create points, vectors, and matrices that have values in the units of the document in which the rule is running.
 </summary>
 <returns>A geometry factory object.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedSheets">
 <summary>
 Managed wrapper for the sheets in a drawing.
 Each sheet is of the type <see cref="T:Autodesk.iLogic.Interfaces.IManagedSheet"/>.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedSheet">
 <summary>
 Manage a drawing sheet.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedSheet.DrawingViews">
 <summary>
 Returns the collection of drawing views on the sheet.
 Each view is of the type <see cref="T:Autodesk.iLogic.Interfaces.IManagedDrawingView"/>.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedSheet.View(System.String)">
 <summary>
 Gets the drawing view with the specified name on this sheet.
 If no view with the name is found, and exception (error) will be thrown.
 </summary>
 <param name="viewName">The view name.</param>
 <returns>The view that was found.</returns>
 <remarks>Overloads the correspond property of the <see cref="T:Autodesk.iLogic.Interfaces.ICadDrawingSheet"> interface, in order to provide access to a managed view.</see>/></remarks>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedSheet.DrawingDimensions">
 <summary>
 Returns the collection of dimensions on the sheet.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedSheet.DrawingNotes">
 <summary>
 Returns the collection of drawing notes on the sheet.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedSheet.Balloons">
 <summary>
 Returns the collection of balloons on the sheet.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedSheet.Centerlines">
 <summary>
 Returns the collection of centerlines on the sheet.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedSheet.Centermarks">
 <summary>
 Returns the collection of centermarks on the sheet.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedSheet.Name">
 <summary>
 Returns the name of the sheet.
 </summary>
 <returns></returns>
 <remarks>This is required because the <see cref="T:Autodesk.iLogic.Interfaces.IManagedItem`1"/> and ICadDrawingSheet both implement the Name property.</remarks>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedDrawingViews">
 <summary>
 Managed wrapper for the drawing views on a sheet.
 Each view is of the type <see cref="T:Autodesk.iLogic.Interfaces.IManagedDrawingView"/>.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedDrawingView">
 <summary>
 A managed drawing view. This wraps an Inventor API DrawingView object.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedDrawingView.Name">
 <summary>
 Returns the name of the view.
 </summary>
 <returns></returns>
 <remarks>This is required because the <see cref="T:Autodesk.iLogic.Interfaces.IManagedItem`1"/> and ICadDrawingSheet both implement the Name property.</remarks>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawingView.GetIntent(Autodesk.iLogic.Types.ComponentArgument,System.String,Inventor.PointIntentEnum,Autodesk.iLogic.Types.CurveChoiceSpec)">
 <summary>
 Gets an intent for a drawing curve created by model geometry which is in a component within the assembly document shown in the drawing view.
 </summary>
 <param name="component">The component within the model document</param>
 <param name="entityName">The name of the model geometry (face, edge, vertex or work feature).</param>
 <param name="intent">The type of GeometryIntent wanted.</param>
 <param name="nearPoint">If more than one drawing curve is found, chooses the one whose bounding box center is closest to this point.</param>
 <returns>The GeometryIntent that was created.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawingView.GetIntent(System.String,Inventor.PointIntentEnum,Autodesk.iLogic.Types.CurveChoiceSpec)">
 <summary>
 Gets an intent for a drawing curve created by model geometry which is in the model document shown in the drawing view.
 </summary>
 <param name="entityName">The name of the model geometry (face, edge, vertex or work feature).</param>
 <param name="intent">The type of GeometryIntent wanted.</param>
 <param name="nearPoint">If more than one drawing curve is found, chooses the one whose bounding box center is closest to this point.</param>
 <returns>The GeometryIntent that was created.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawingView.GetFeatureFaceIntent(Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.FaceIndexArgument,Inventor.PointIntentEnum,Autodesk.iLogic.Types.CurveChoiceSpec)">
 <summary>
 Gets an intent for a drawing curve created by a model face (or an edge on the face) which is on a feature in an component within the assembly document shown in the drawing view.
 </summary>
 <param name="component">The component within the model document</param>
 <param name="featureName">The name of the model feature.</param>
 <param name="faceIndex">The integer index of the face on the feature (1-based), or a symbolic name</param>
 <param name="intent">The type of GeometryIntent wanted.</param>
 <param name="nearPoint">If more than one drawing curve is found, chooses the one whose bounding box center is closest to this point.</param>
 <returns>The GeometryIntent that was created.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawingView.GetFeatureFaceIntent(System.String,Autodesk.iLogic.Types.FaceIndexArgument,Inventor.PointIntentEnum,Autodesk.iLogic.Types.CurveChoiceSpec)">
 <summary>
 Gets an intent for a drawing curve created by a model face (or an edge on the face) which is on a feature in the model document shown in the drawing view.
 </summary>
 <param name="featureName">The name of the model feature.</param>
 <param name="faceIndex">The integer index of the face on the feature (1-based), or a symbolic name.</param>
 <param name="intent">The type of GeometryIntent wanted.</param>
 <param name="nearPoint">If more than one drawing curve is found, chooses the one whose bounding box center is closest to this point.</param>
 <returns>The GeometryIntent that was created.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawingView.GetPatternFaceIntent(Autodesk.iLogic.Types.ComponentArgument,System.String,Autodesk.iLogic.Types.PatternFeatureIndexArgument,Autodesk.iLogic.Types.FaceIndexArgument,Inventor.PointIntentEnum,Autodesk.iLogic.Types.CurveChoiceSpec)">
 <summary>
 Gets an intent for a drawing curve created by a model face (or an edge on the face) which is on a pattern feature in a component within the assembly document shown in the drawing view.
 </summary>
 <param name="component">The component within the model document</param>
 <param name="featureName">The name of the model feature.</param>
 <param name="occurrenceIndex">The index of the pattern occurrence (1-based).
 For a rectangular pattern, this can be a array of two indices: the index in Direction 1 followed by the index in Direction 2.</param>
 <param name="faceIndex">The index of the face on the pattern occurrence (1-based), or a symbolic name.</param>
 <param name="intent">The type of GeometryIntent wanted.</param>
 <param name="nearPoint">If more than one drawing curve is found, chooses the one whose bounding box center is closest to this point.</param>
 <returns>The GeometryIntent that was created.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawingView.GetPatternFaceIntent(System.String,Autodesk.iLogic.Types.PatternFeatureIndexArgument,Autodesk.iLogic.Types.FaceIndexArgument,Inventor.PointIntentEnum,Autodesk.iLogic.Types.CurveChoiceSpec)">
 <summary>
  Gets an intent for a drawing curve created by a model face (or an edge on the face) which is on a pattern feature in the model document shown in the drawing view.
 </summary>
 <param name="featureName">The name of the model feature.</param>
 <param name="occurrenceIndex">The index of the pattern occurrence (1-based).
 For a rectangular pattern, this can be a array of two indices: the index in Direction 1 followed by the index in Direction 2.</param>
 <param name="faceIndex">The index of the face on the pattern occurrence (1-based), or a symbolic name.</param>
 <param name="intent">The type of GeometryIntent wanted.</param>
 <param name="nearPoint">If more than one drawing curve is found, chooses the one whose bounding box center is closest to this point.</param>
 <returns>The GeometryIntent that was created.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawingView.SheetPoint(System.Double,System.Double)">
 <summary>
 Gets a point in sheet space, given normalized view coordinates in the range 0 to 1.
 x=0, y=0 is at the bottom left corner of the view
 x=1, y=1 is at the top right corner of the view
 </summary>
 <param name="x"></param>
 <param name="y"></param>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawingView.GetTextPlacementReference(Autodesk.iLogic.Types.ComponentArgument,System.String,System.Double,System.Double)">
 <summary>
 Gets a reference to be used for linear dimension text placement.
 </summary>
 <param name="component"></param>
 <param name="entityName"></param>
 <param name="xDirection"></param>
 <param name="yDirection"></param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedDrawingDimensions">
 <summary>
 A managed wrapper for the dimensions on a drawing sheet.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedDrawingDimensions.GeneralDimensions">
 <summary>
 Returns the general dimensions (linear, angular, diameter, and radius).
 </summary>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedDrawingDimensions.Arrange">
 <summary>
 Arrange the dimensions that have been managed in the current session.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedGeneralDimensions">
 <summary>
 Manages the general dimensions (linear, angular, diameter, and radius) on a drawing sheet.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedGeneralDimensions.AddLinear(System.String,Autodesk.iLogic.Types.LinearDimensionTextPositionSpec,Inventor.GeometryIntent,Inventor.GeometryIntent,Inventor.DimensionTypeEnum,System.Object,System.Boolean,Inventor.DimensionStyle,Inventor.Layer)">
 <summary>
 Adds or edits a linear dimension.
 Valid intent combinations are: Two points, Two curves, Point and a curve, One linear curve, One arc curve (with DimensionType set to kAlignedDimensionType for chord length and kArcLengthDimensionType for arc length).
 </summary>
 <param name="name">The name of the dimension.</param>
 <param name="textOrigin">The position of the dimension text on the sheet.</param>
 <param name="intentOne">Specifies the first geometry to dimension. This can be created using the GetIntent method on the <see cref="T:Autodesk.iLogic.Interfaces.IManagedDrawingView"/> object.</param>
 <param name="intentTwo">Specifies the second geometry to dimension. This argument must be specified if the first geometry intent is a point.</param>
 <param name="dimensionType">Specifies the linear dimension type. Valid values (based on the input intents) are kAlignedDimensionType, kHorizontalDimensionType, kVerticalDimensionType, kArcLengthDimensionType, kSymmetricDimensionType and kDiametricDimensionType. If not specified, the argument defaults to kAlignedDimensionType. An error will occur if the specified type is invalid for the input intents. For instance, kHorizontalDimensionType is invalid for a vertical dimension and kSymmetricDimensionType and kDiametricDimensionType are invalid if only the first intent (an edge) is specified. kArcLengthDimensionType is only valid if two intents are supplied and they represent end points of an arc or a single intent is supplied and it represents an arc.</param>
 <param name="alignmentGeometry">The linear geometry object to align the dimension. Valid objects are DrawingCurve and SketchLine in the same DrawingView as the dimension. This is only applicable if the DimensionType is set to kAlignedToCurveDimensionType or kNormalToCurveDimensionType.</param>
 <param name="arrowHeadsInside">Indicates whether to place the dimension line arrows inside or outside. If not specified, this argument defaults to True indicating that arrowheads will be placed inside (if possible).</param>
 <param name="dimensionStyle">The dimension style to use for the dimension. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">The layer to use for the dimension. If not specified, the layer defined by the active standard is used.</param>
 <returns>The dimension.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedGeneralDimensions.AddLinearForeshortened(System.String,Autodesk.iLogic.Types.LinearDimensionTextPositionSpec,Inventor.GeometryIntent,Inventor.GeometryIntent,System.Boolean,Inventor.DimensionStyle,Inventor.Layer)">
 <summary>
 Adds or edits a linear foreshortened dimension.
 </summary>
 <param name="name">The name of the dimension.</param>
 <param name="textOrigin">The position of the dimension text on the sheet.</param>
 <param name="intentOne">Specifies the first geometry to dimension. This can be created using the GetIntent method on the <see cref="T:Autodesk.iLogic.Interfaces.IManagedDrawingView"/> object.</param>
 <param name="intentTwo">Specifies the second geometry to dimension.</param>
 <param name="hideSecondArrowHead">Specifies whether to hide the second arrowhead of the dimension. Default: False.</param>
 <param name="dimensionStyle">The dimension style to use for the dimension. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">The layer to use for the dimension. If not specified, the layer defined by the active standard is used.</param>
 <returns>The dimension.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedGeneralDimensions.AddDiameter(System.String,Autodesk.iLogic.Types.DiameterDimensionTextPositionSpec,Inventor.GeometryIntent,System.Boolean,System.Boolean,System.Boolean,Inventor.DimensionStyle,Inventor.Layer)">
 <summary>
 Adds or edits a diameter dimension.
 </summary>
 <param name="name">The name of the dimension.</param>
 <param name="textOrigin">The position of the dimension text on the sheet.</param>
 <param name="intent">Specifies the arc or circle to dimension. A parameter along the curve should be specified in the intent. If not, a default is assumed.</param>
 <param name="arrowHeadsInside">Indicates whether to place the dimension line arrows inside or outside. Default: False</param>
 <param name="leaderFromCenter">Indicates whether the leader starts from the center of the arc or the circle. If not specified, the argument defaults to False indicating that the leader will not start from the center.</param>
 <param name="singleDimensionLine">Indicates whether to use a single dimension line. If not specified, the argument defaults to True indicating a single dimension line will be used.</param>
 <param name="dimensionStyle"> Specifies the dimension style to use for the dimension. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">Specifies the layer to use for the dimension. If not specified, the layer defined by the active standard is used.</param>
 <returns>The dimension.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedGeneralDimensions.AddRadius(System.String,Autodesk.iLogic.Types.RadiusDimensionTextPositionSpec,Inventor.GeometryIntent,System.Boolean,System.Boolean,System.Boolean,Inventor.DimensionStyle,Inventor.Layer)">
 <summary>
 Adds or edits a radius dimension.
 </summary>
 <param name="name">The name of the dimension.</param>
 <param name="textOrigin">The position of the dimension text on the sheet.</param>
 <param name="intent">Specifies the arc or circle to dimension. A parameter along the curve should be specified in the intent. If not, a default is assumed.</param>
 <param name="arrowHeadsInside">Indicates whether to place the dimension line arrows inside or outside. If not specified, this argument defaults to False indicating that arrowheads will be place outside.</param>
 <param name="leaderFromCenter">Indicates whether the leader starts from the center of the arc or the circle. If not specified, the argument defaults to False indicating that the leader will not start from the center. This argument is ignored and defaulted to True if the ArrowheadsInside argument is specified to be True.</param>
 <param name="jogged">Indicates whether the dimension is jogged. If not specified, the argument defaults to False.</param>
 <param name="dimensionStyle">Specifies the dimension style to use for the dimension. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">Specifies the layer to use for the dimension. If not specified, the layer defined by the active standard is used.</param>
 <returns>The dimension.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedGeneralDimensions.AddAngular(System.String,Autodesk.iLogic.Types.AngularDimensionTextPositionSpec,Inventor.GeometryIntent,Inventor.GeometryIntent,Inventor.GeometryIntent,System.Boolean,System.Boolean,System.Boolean,Inventor.DimensionStyle,Inventor.Layer)">
 <summary>
 Adds or edits an angular dimension.
 Valid intent combinations are three points, two non-parallel linear curves, or one arc curve.
 </summary>
 <param name="name">The name of the dimension.</param>
 <param name="textOrigin">The position of the dimension text on the sheet.</param>
 <param name="intentOne">Specifies the first geometry to dimension.</param>
 <param name="intentTwo">Specifies the second geometry to dimension. If three point intents are provided, this input indicates the apex point of the angle. Default: Nothing</param>
 <param name="intentThree">Specifies the third geometry to dimension. This argument must be specified if the first and second geometry intents are points. Default: Nothing</param>
 <param name="arrowHeadsInside">Indicates whether to place the dimension line arrows inside or outside. If not specified, this argument defaults to True indicating that arrowheads will be place inside (if possible).</param>
 <param name="useQuadrant">Optional input Boolean that indicates whether to use the quadrant in which the input text point lies to decide which angle to dimension. If not specified, the argument defaults to True. If a single (arc) intent is provided as input, this argument is ignored and assumed to be False.</param>
 <param name="oppositeAngle">Indicates whether to dimension the opposite angle. If not specified, the argument defaults to False.</param>
 <param name="dimensionStyle">Specifies the dimension style to use for the dimension. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">Specifies the layer to use for the dimension. If not specified, the layer defined by the active standard is used.</param>
 <returns>The dimension.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedGeneralDimensions.AddAngularForeshortened(System.String,Autodesk.iLogic.Types.AngularDimensionTextPositionSpec,Inventor.GeometryIntent,Inventor.GeometryIntent,Inventor.GeometryIntent,System.Boolean,System.Boolean,System.Boolean,Inventor.DimensionStyle,Inventor.Layer)">
 <summary>
 Adds or edits a foreshortened angular dimension.
 </summary>
 <param name="name">The name of the dimension.</param>
 <param name="textOrigin">The position of the dimension text on the sheet.</param>
 <param name="intentOne">Specifies the first geometry to dimension.</param>
 <param name="intentTwo">Specifies the second geometry to dimension. If three point intents are provided, this input indicates the apex point of the angle. Default: Nothing</param>
 <param name="intentThree">Specifies the third geometry to dimension. This argument must be specified if the first and second geometry intents are points. Default: Nothing</param>
 <param name="hideSecondArrowhead">Specifies whether to hide the second arrowhead of the dimension. Default: False.</param>
 <param name="useQuadrant">Optional input Boolean that indicates whether to use the quadrant in which the input text point lies to decide which angle to dimension. If not specified, the argument defaults to True. If a single (arc) intent is provided as input, this argument is ignored and assumed to be False.</param>
 <param name="oppositeAngle">Optional input Boolean that indicates whether to dimension the opposite angle. If not specified, the argument defaults to False.</param>
 <param name="dimensionStyle">Specifies the dimension style to use for the dimension. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">Specifies the layer to use for the dimension. If not specified, the layer defined by the active standard is used.</param>
 <returns>The dimension.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedGeneralDimensions.AddArcLengthForeshortened(System.String,Autodesk.iLogic.Types.LinearDimensionTextPositionSpec,Inventor.GeometryIntent,Inventor.GeometryIntent,Inventor.GeometryIntent,Inventor.GeometryIntent,System.Boolean,System.Boolean,System.Boolean,Inventor.DimensionStyle,Inventor.Layer)">
 <summary>
  Adds or edits a foreshortened arc length dimension.
  (To create a full arc length dimension, use AddLinear.)
 </summary>
 <param name="name">The name of the dimension.</param>
 <param name="textOrigin">The position of the dimension text on the sheet.</param>
 <param name="intentOne">Specifies the first geometry to dimension.</param>
 <param name="intentTwo">Specifies the second geometry to dimension. If three point intents are provided, this input indicates the apex point of the angle. Default: Nothing</param>
 <param name="intentThree">Specifies the third geometry to dimension. This argument must be specified if the first and second geometry intents are points. Default: Nothing</param>
 <param name="virtualArcPosition">Specifies the virtual arc’s position for dimension. Default: Nothing</param>
 <param name="hideSecondArrowhead">Specifies whether to hide the second arrowhead of the dimension. Default: False.</param>
 <param name="useQuadrant">Optional input Boolean that indicates whether to use the quadrant in which the input text point lies to decide which angle to dimension. If not specified, the argument defaults to True. If a single (arc) intent is provided as input, this argument is ignored and assumed to be False.</param>
 <param name="oppositeAngle">Optional input Boolean that indicates whether to dimension the opposite angle. If not specified, the argument defaults to False.</param>
 <param name="dimensionStyle">Specifies the dimension style to use for the dimension. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">Specifies the layer to use for the dimension. If not specified, the layer defined by the active standard is used.</param>
 <returns>The dimension.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedBalloons">
 <summary>
 A collection of managed drawing balloons.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedBalloons.SetPartsListOptions(Autodesk.iLogic.Types.BalloonPartsListOptions)">
 <summary>
 Sets the parts list options for balloon creation.
 If these options where previously set as a result of creating a parts list or a balloon in the drawing based on the same model,
 this call has no effect.
 </summary>
 <param name="partsListOptions"></param>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedBalloons.Add(System.String,System.Collections.Generic.IEnumerable{Autodesk.iLogic.Types.DocumentUnitsPoint2d},Inventor.GeometryIntent,System.Object,Inventor.BalloonStyle,Inventor.Layer)">
 <summary>
 Adds or edits a balloon. The corresponding BOMView in the model is automatically enabled if not already enabled.
 </summary>
 <param name="name">The name of the balloon.</param>
 <param name="leaderPoints">A list of DocumentUnitsPoint2d objects representing the leader originating at the balloon.
 Provide an empty list or Nothing if you don't want a leader.</param>
 <param name="intent">A GeometryIntent that indicates a drawing curve to which the balloon should be attached.
 The intent can also include a specification for the point on the curve to attach to.</param>
 <param name="virtualComponent">Optional input object that defines the virtual or custom component that this balloon will be attached to.
 This can either be a ComponentOccurrence / ComponentOccurrenceProxy object representing a virtual component,
 a BOMRow that represents a virtual component or a custom/virtual DrawingBOMRow.
 Default: Nothing</param>
 <param name="balloonStyle">Optional input BalloonStyle object that specifies the balloon style to use for the balloon. If not specified, the style defined by the active standard is used. Default: Nothing.</param>
 <param name="layer">Optional input Layer object that specifies the layer to use for the balloon. If not specified, the layer defined by the active standard is used. Default: Nothing.</param>
 <returns></returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedBalloon">
 <summary>
 A managed drawing balloon.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedCenterlines.Add(System.String,System.Collections.Generic.IEnumerable{System.Object},Inventor.CentermarkStyle,Inventor.Layer,System.Boolean)">
 <summary>
 Method that creates a new centerline. The centerline created with this method is kRegularCenterline type.
 </summary>
 <param name="name">The name of the managed centerline.</param>
 <param name="centerEntities">Input ObjectCollection object that contains the set of entities that define the points the centerline passes through. Valid objects for input are GeometryIntent objects that reference circular or elliptical drawing curves, GeometryIntent objects that reference the end or midpoint of linear drawing curves, and center marks. Providing two points will result in a linear centerline. Providing three points will result in a circular centerline. Providing more than three points will result in a linear or a circular centerline depending on whether all of the input points lie on a circle.</param>
 <param name="centermarkStyle">Object that specifies the center mark style to use for the centerline. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">Object that specifies the layer to use for the centerline. If not specified, the layer defined by the active standard is used.</param>
 <param name="closed">Input Boolean that is only used in the case of a circular centerline. This indicates if it should be closed or not.</param>
 <returns>The managed centerline.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedCenterlines.AddBisector(System.String,Inventor.GeometryIntent,Inventor.GeometryIntent,Inventor.CentermarkStyle,Inventor.Layer)">
 <summary>
 Method that creates a new bisector centerline. The centerline created with this method is kBisectorCenterline type.
 </summary>
 <param name="name">The name of the managed centerline.</param>
 <param name="entityOne">Input GeometryIntent that defines the first entity to bisect. This can be a line or a circular entity.</param>
 <param name="entityTwo">Input GeometryIntent that defines the second entity to bisect. If the first entity was a line then this must also be a line. If the first entity was a circular entity then this must be a circular entity that is concentric to the first entity.</param>
 <param name="centermarkStyle">Object that specifies the center mark style to use for the centerline. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">Object that specifies the layer to use for the centerline. If not specified, the layer defined by the active standard is used.</param>
 <returns>The managed centerline.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedCenterlines.AddByWorkFeature(System.String,System.Object,Inventor.DrawingView,Inventor.CentermarkStyle,Inventor.Layer)">
 <summary>
 Method that creates a center line that represents the work feature within the drawing view.
 </summary>
 <param name="name">The name of the managed centerline.</param>
 <param name="workFeature">Specifies the work feature to create the center line for. This can be a WorkAxis or WorkPlane object. In the case of a WorkPlane object, the work plane must be oriented so it is perpendicular to the plane of the sheet, (only the edge of the work plane is visible within that view). If an work plane is provided that does not meet this criteria the method will fail.
 When working with an assembly the input WorkAxis Or WorkPlane must always be with respect to the top-level. This means that work points Or axes that exist within the parts Or sub-assemblies must be represented by WorkAxisProxy Or WorkPlaneProxy objects.</param>
 <param name="drawingView">Specifies the drawing view to create the centerline within.</param>
 <param name="centermarkStyle">Object that specifies the center mark style to use for the centerline. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">Object that specifies the layer to use for the centerline. If not specified, the layer defined by the active standard is used.</param>
 <returns>The managed centerline.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedCenterlines.AddCenteredPattern(System.String,Inventor.GeometryIntent,System.Collections.Generic.IEnumerable{System.Object},Inventor.CentermarkStyle,Inventor.Layer,System.Boolean)">
 <summary>
 Method that creates a new centerline pattern. The centerline created with this method is kCenteredPatternCenterline type.
 </summary>
 <param name="name">The name of the managed centerline.</param>
 <param name="patternCenter">Input GeometryIntent that defines the a circular or elliptical drawing curve that defines the center of the pattern.</param>
 <param name="centerEntities">Input ObjectCollection object that contains the set of entities that define the points the centerline passes through. Valid objects for input are GeometryIntent objects that reference circular or elliptical drawing curves, and center marks.</param>
 <param name="centermarkStyle">Object that specifies the center mark style to use for the centerline. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">Object that specifies the layer to use for the centerline. If not specified, the layer defined by the active standard is used.</param>
 <param name="closed">Input Boolean that indicates if the centerline should be closed or not.</param>
 <returns>The managed centerline.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedCentermarks.Add(System.String,Inventor.GeometryIntent,System.Boolean,System.Boolean,Inventor.CentermarkStyle,Inventor.Layer)">
 <summary>
 Method that creates a center mark relative to drawing geometry. This can result in a center mark at the origin of a punch center if the specified geometry is the edge of a punch and the AtPunchCenter argument is true.
 </summary>
 <param name="name">The name of the managed centermark.</param>
 <param name="intent">Specifies the entity to create the center mark relative to. This is typically a circular or elliptical drawing curve but can be any drawing curve when it's the edge of a punch feature and you're creating the center point at the origin of the punch. The GeometryIntent object can be created using the CreateGeometryIntent method on the Sheet object.</param>
 <param name="extensionLinesVisible">Optional input Boolean that specifies if the extension lines should be visible in the created center mark.</param>
 <param name="atPunchCenter">Optional input Boolean that specifies if the input geometry is the edge of the punch feature the center mark should be created at the origin of the punch feature instead of the center of the input geometry.</param>
 <param name="centermarkStyle">Object that specifies the center mark style to use for the center mark. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">Object that specifies the layer to use for the center mark. If not specified, the layer defined by the active standard is used.</param>
 <returns>The managed centermark.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedCentermarks.AddByCenterOfGravity(System.String,Inventor.DrawingView,Inventor.CentermarkStyle,Inventor.Layer)">
 <summary>
 Method that creates a center mark at the center of gravity of the model in the input drawing view. This will fail in the case where the view does not contain any solid parts.
 </summary>
 <param name="name">The name of the managed centermark.</param>
 <param name="drawingView">Specifies the view to create the center mark for.</param>
 <param name="centermarkStyle">Object that specifies the center mark style to use for the center mark. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">Object that specifies the layer to use for the center mark. If not specified, the layer defined by the active standard is used.</param>
 <returns>The managed centermark.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedCentermarks.AddByWorkFeature(System.String,System.Object,Inventor.DrawingView,Inventor.CentermarkStyle,Inventor.Layer)">
 <summary>
 Method that creates a center mark that represents the work feature within the drawing view.
 </summary>
 <param name="name">The name of the managed centermark.</param>
 <param name="workFeature">Specifies the work feature to create the center mark for. This can be a WorkPoint or WorkAxis object. In the case of a WorkAxis object, the work axis must be oriented so it is normal to the plane of the sheet. If an work axis is provided that does not meet this criteria the method will fail.</param>
 <param name="drawingView">Specifies the drawing view to create the center mark within. When working with an assembly the input WorkPoint Or WorkAxis must always be with respect to the top-level. This means that work points Or axes that exist within the parts Or sub-assemblies must be represented by WorkPointProxy Or WorkAxisProxy objects.</param>
 <param name="centermarkStyle">Object that specifies the center mark style to use for the center mark. If not specified, the style defined by the active standard is used.</param>
 <param name="layer">Object that specifies the layer to use for the center mark. If not specified, the layer defined by the active standard is used.</param>
 <returns>The managed centermark.</returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedDrawingNotes.GeneralNotes">
 <summary>
 Gets the collection of general notes on the sheet.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedDrawingNotes.LeaderNotes">
 <summary>
 Gets the collection of leader notes on the sheet.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedDrawingNotes.HoleThreadNotes">
 <summary>
 Gets the collection of hole and thread notes on the sheet.
 </summary>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedGeneralNotes.TryGetItem(System.String,Autodesk.iLogic.Interfaces.IManagedGeneralNote@)">
 <summary>
 Try to get a managed general note.
 </summary>
 <param name="name">The name of the leader note.</param>
 <param name="generalNote">The found item, or Nothing if not found.</param>
 <returns>True if the item was found.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedLeaderNotes.Add(System.String,System.Collections.Generic.IEnumerable{Autodesk.iLogic.Types.DocumentUnitsPoint2d},Inventor.GeometryIntent,System.String,System.Object)">
 <summary>
 Adds or edits a leader note.
 </summary>
 <param name="name">The name of the managed leader note.</param>
 <param name="leaderPoints">A list of points representing the leader originating at the note.
 The first item (if present) specifies the text position.
 This can be empty (or Nothing) if no leader is wanted.
 Note: this does not include a GeometryIntent to attach the leader to.
 </param>
 <param name="attachTo">The geometry to attach the leader to.</param>
 <param name="formattedText">Specifies the text of the general note. This string can contain tags that define internal formatting changes, which override the text style associated with the general note. The formatting is specified using XML tags within the string. By default, all text in the string will be displayed using the text style assigned to the note. You can use the XML tags to override the default style and apply style overrides for all or portions of the text. The formatting overrides are defined using tags. There is an opening tag and closing tag for each formatting override you define. The text between the opening and closing tags is affected by the override. See the list of XML text formatting tags under Reference Topics in the Overviews section in the Inventor API help.</param>
 <param name="dimensionStyle">Specifies which dimension style to use for the leader note.
 The dimension style can be specified by providing the name of an existing style or by supplying a DimensionStyle object.
 Default = Nothing : uses the default leader note style.</param>
 <returns>The managed leader note.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedLeaderNotes.TryGetItem(System.String,Autodesk.iLogic.Interfaces.IManagedLeaderNote@)">
 <summary>
 Try to get a managed leader note.
 </summary>
 <param name="name">The name of the leader note.</param>
 <param name="leaderNote">The found item, or Nothing if not found.</param>
 <returns>True if the item was found.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedHoleThreadNotes">
 <summary>
 Provides access to all the hole and thread notes on a drawing sheet.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedHoleThreadNotes.Add(System.String,Autodesk.iLogic.Types.DiameterDimensionTextPositionSpec,System.Object,System.Boolean,System.Object)">
 <summary>
 Adds or edits a hole or thread note. Different results are possible depending on the input provided, as discussed below.
 </summary>
 <param name="name">The name of the managed hole or thread note.</param>
 <param name="position">The position of the hole or thread note on the sheet.</param>
 <param name="holeOrThreadEdge">Input DrawingCurve or GeometryIntent object that specifies the edge to create the note for and the location along the edge the note points to.
 If the drawing curve or geometry intent does not represent a hole or thread edge, the method returns an error.
 For more information about how to get different results by providing different inputs for this argument, see the discussion on the HoleThreadNotes.Add page in the Inventor API help.</param>
 <param name="dimensionStyle">Optional input that specifies which dimension style to use for the note.
 The dimension style can be specified by providing the name of an existing style or by supplying a DimensionStyle object.
 Default = Nothing : uses the default hole or thread note style.</param>
 <returns>The managed hole or thread note.</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IManagedHoleThreadNotes.TryGetItem(System.String,Autodesk.iLogic.Interfaces.IManagedHoleThreadNote@)">
 <summary>
 Try to get a managed hole or thread note.
 </summary>
 <param name="name">The name of the leader note.</param>
 <param name="note">The found item, or Nothing if not found.</param>
 <returns>True if the item was found.</returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedHoleThreadNote">
 <summary>
 A managed hole or thread note.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IManagedEntity">
 <summary>
 A generic managed entity. This is used in drawings.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedEntity.Name">
 <summary>
 The entity name.
 </summary>
 <returns></returns>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IManagedEntity.NativeEntity">
 <summary>
 The Inventor API object.
 </summary>
 <returns></returns>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IRuleInterface">
 <summary>
 Interface for a single iLogic rule. Each rule has a class that implements this interface.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IRuleInterface.RuleParametersInit">
 <summary>
 Loads the values of any Inventor parameters used as local variables from the Inventor model to this rule.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IRuleInterface.Main">
 <summary>
 The main method of the rule. When the rule is run, this method will be called.
 </summary>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IRuleInterface.RuleParametersOutput">
 <summary>
 Applies the modified values of any Inventor parameters used as local variables in this rule to the Inventor model.
 </summary>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IRulesHost">
 <summary>
 Provides a connection between code in iLogic rules and the host. The host is the iLogic/Inventor system.
 </summary>
</member>
<member name="P:Autodesk.iLogic.Interfaces.IRulesHost.CompileForBasicDebugging">
 <summary>
 Provide basic debugging. Preprocessed VB files must be loaded into Visual Studio from the %TEMP% folder.
 </summary>
 <returns>true if basic debugging is enabled</returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IRulesHost.GetTempSourceFileName(System.String,System.String,System.String)">
 <summary>
 For basic debugging. The host provides the name of the temporary file
 </summary>
 <returns></returns>
</member>
<member name="M:Autodesk.iLogic.Interfaces.IRulesHost.GetLoadApproval(System.String,System.Collections.Generic.HashSet{System.String},System.Boolean)">
 <summary>
 Ask the host if it's OK to load and run a compiled rule, even though unsafe items were found in a security scan.
 </summary>
 <param name="ruleSourceCodeId">an identifier (unique hash) for the rule source code</param>
 <param name="unsafeItems">a set of names of unsafe items (methods or types) found in the rule</param>
</member>
<member name="T:Autodesk.iLogic.Interfaces.IParamChanger">
 <summary>
 Provides methods to change Inventor parameter values. For internal use.
 </summary>
</member>
</members>
</doc>
